
L432KC_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c88  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001e14  08001e14  00011e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e54  08001e54  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001e54  08001e54  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e54  08001e54  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e54  08001e54  00011e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e58  08001e58  00011e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001e68  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001e68  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008863  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001779  00000000  00000000  0002889f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  0002a018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000620  00000000  00000000  0002a700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f48b  00000000  00000000  0002ad20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007aaa  00000000  00000000  0004a1ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb12e  00000000  00000000  00051c55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010cd83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001998  00000000  00000000  0010cdd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001dfc 	.word	0x08001dfc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08001dfc 	.word	0x08001dfc

080001cc <vScanMainFirmwareFlashAddress>:
 * If we find nothing, the address is not changed.
 */
void vScanMainFirmwareFlashAddress(uint32_t* pu32JumpAddress,
                                   uint32_t u32FlashFwAreaBegin,
                                   uint32_t u32FlashFwAreaEndBoundary)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 80001d2:	af00      	add	r7, sp, #0
 80001d4:	f107 030c 	add.w	r3, r7, #12
 80001d8:	6018      	str	r0, [r3, #0]
 80001da:	f107 0308 	add.w	r3, r7, #8
 80001de:	6019      	str	r1, [r3, #0]
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	601a      	str	r2, [r3, #0]
  uint32_t u32ReadNum = 0;
 80001e4:	2300      	movs	r3, #0
 80001e6:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
  uint32_t* pu32FwFlashReadPointer = (uint32_t*)(*pu32JumpAddress);
 80001ea:	f107 030c 	add.w	r3, r7, #12
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
  uint32_t u32JumpAddress = *pu32JumpAddress;
 80001f6:	f107 030c 	add.w	r3, r7, #12
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
  uint8_t au8EmptyFlashBuffer[FLASH_BUFFER_SIZE] = { 0 };
 8000202:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	3304      	adds	r3, #4
 800020c:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f001 fdea 	bl	8001dec <memset>
  uint8_t au8ReadFlashBuffer[FLASH_BUFFER_SIZE] = { 0 };
 8000218:	f107 0314 	add.w	r3, r7, #20
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
 8000220:	3304      	adds	r3, #4
 8000222:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8000226:	2100      	movs	r1, #0
 8000228:	4618      	mov	r0, r3
 800022a:	f001 fddf 	bl	8001dec <memset>
  uint32_t u32MaxBufReads = (u32FlashFwAreaEndBoundary - u32FlashFwAreaBegin) / FLASH_BUFFER_SIZE;
 800022e:	1d3a      	adds	r2, r7, #4
 8000230:	f107 0308 	add.w	r3, r7, #8
 8000234:	6812      	ldr	r2, [r2, #0]
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	1ad3      	subs	r3, r2, r3
 800023a:	0a5b      	lsrs	r3, r3, #9
 800023c:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
  uint8_t u8Continue = 1;
 8000240:	2301      	movs	r3, #1
 8000242:	f887 341b 	strb.w	r3, [r7, #1051]	; 0x41b

  memset(au8EmptyFlashBuffer, 0xFF, sizeof(au8EmptyFlashBuffer));
 8000246:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800024a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800024e:	21ff      	movs	r1, #255	; 0xff
 8000250:	4618      	mov	r0, r3
 8000252:	f001 fdcb 	bl	8001dec <memset>

  for (u32ReadNum = 0; (u32ReadNum < u32MaxBufReads) && u8Continue; u32ReadNum++)
 8000256:	2300      	movs	r3, #0
 8000258:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 800025c:	e04e      	b.n	80002fc <vScanMainFirmwareFlashAddress+0x130>
  {
    memcpy(au8ReadFlashBuffer, pu32FwFlashReadPointer, FLASH_BUFFER_SIZE);
 800025e:	f107 0314 	add.w	r3, r7, #20
 8000262:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000266:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 800026a:	4618      	mov	r0, r3
 800026c:	f001 fdb0 	bl	8001dd0 <memcpy>

    if (memcmp(au8ReadFlashBuffer, au8EmptyFlashBuffer, FLASH_BUFFER_SIZE) != 0)
 8000270:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8000274:	f107 0314 	add.w	r3, r7, #20
 8000278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800027c:	4618      	mov	r0, r3
 800027e:	f001 fd99 	bl	8001db4 <memcmp>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d02e      	beq.n	80002e6 <vScanMainFirmwareFlashAddress+0x11a>
    {
      // Found something
      u32JumpAddress = (uint32_t)pu32FwFlashReadPointer;
 8000288:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800028c:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c

      // Need to go trough the read buffer in 4 byte increments and
      // see what is here. Re-using u32ReadNum now.
      for (u32ReadNum = 0; (u32ReadNum < (FLASH_BUFFER_SIZE / 4)) && u8Continue; u32ReadNum++)
 8000290:	2300      	movs	r3, #0
 8000292:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8000296:	e01e      	b.n	80002d6 <vScanMainFirmwareFlashAddress+0x10a>
      {
        if (memcmp(au8EmptyFlashBuffer, au8ReadFlashBuffer + (u32ReadNum * 4), 4) != 0)
 8000298:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 800029c:	009b      	lsls	r3, r3, #2
 800029e:	f107 0214 	add.w	r2, r7, #20
 80002a2:	18d1      	adds	r1, r2, r3
 80002a4:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80002a8:	2204      	movs	r2, #4
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 fd82 	bl	8001db4 <memcmp>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d00a      	beq.n	80002cc <vScanMainFirmwareFlashAddress+0x100>
        {
          u32JumpAddress += (u32ReadNum * 4);
 80002b6:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80002ba:	009b      	lsls	r3, r3, #2
 80002bc:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 80002c0:	4413      	add	r3, r2
 80002c2:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
          u8Continue = 0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	f887 341b 	strb.w	r3, [r7, #1051]	; 0x41b
      for (u32ReadNum = 0; (u32ReadNum < (FLASH_BUFFER_SIZE / 4)) && u8Continue; u32ReadNum++)
 80002cc:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80002d0:	3301      	adds	r3, #1
 80002d2:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 80002d6:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80002da:	2b7f      	cmp	r3, #127	; 0x7f
 80002dc:	d803      	bhi.n	80002e6 <vScanMainFirmwareFlashAddress+0x11a>
 80002de:	f897 341b 	ldrb.w	r3, [r7, #1051]	; 0x41b
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d1d8      	bne.n	8000298 <vScanMainFirmwareFlashAddress+0xcc>
        }
      }
    }
    pu32FwFlashReadPointer += (FLASH_BUFFER_SIZE / 4);
 80002e6:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 80002ea:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80002ee:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
  for (u32ReadNum = 0; (u32ReadNum < u32MaxBufReads) && u8Continue; u32ReadNum++)
 80002f2:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80002f6:	3301      	adds	r3, #1
 80002f8:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 80002fc:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8000300:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000304:	429a      	cmp	r2, r3
 8000306:	d203      	bcs.n	8000310 <vScanMainFirmwareFlashAddress+0x144>
 8000308:	f897 341b 	ldrb.w	r3, [r7, #1051]	; 0x41b
 800030c:	2b00      	cmp	r3, #0
 800030e:	d1a6      	bne.n	800025e <vScanMainFirmwareFlashAddress+0x92>
  }
  if (u8Continue == 0)
 8000310:	f897 341b 	ldrb.w	r3, [r7, #1051]	; 0x41b
 8000314:	2b00      	cmp	r3, #0
 8000316:	d105      	bne.n	8000324 <vScanMainFirmwareFlashAddress+0x158>
  {
    *pu32JumpAddress = u32JumpAddress;
 8000318:	f107 030c 	add.w	r3, r7, #12
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8000322:	601a      	str	r2, [r3, #0]
  }
}
 8000324:	bf00      	nop
 8000326:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}

0800032e <vDeInitAndJumpToMainFirmware>:
 * that we jump to the right address.)
 */
void vDeInitAndJumpToMainFirmware(tDeinitFuncPointer vPlatformSpecificDeinit,
                                  uint32_t u32BootloaderAddress,
                                  uint32_t u32FirmwareAddress)
{
 800032e:	b580      	push	{r7, lr}
 8000330:	b08a      	sub	sp, #40	; 0x28
 8000332:	af00      	add	r7, sp, #0
 8000334:	60f8      	str	r0, [r7, #12]
 8000336:	60b9      	str	r1, [r7, #8]
 8000338:	607a      	str	r2, [r7, #4]
  uint32_t u32FirmwareStackPointerAddress = 0;
 800033a:	2300      	movs	r3, #0
 800033c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t u32FirmwareResetHandlerAddress = 0;
 800033e:	2300      	movs	r3, #0
 8000340:	623b      	str	r3, [r7, #32]

  uint32_t u32FirmwareOffset = u32FirmwareAddress - u32BootloaderAddress;
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	1ad3      	subs	r3, r2, r3
 8000348:	61bb      	str	r3, [r7, #24]
  uint32_t* pu32FwFlashPointer = (uint32_t*)u32FirmwareAddress;
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	61fb      	str	r3, [r7, #28]
  uint32_t u32RegistersChecksum = 0;
 800034e:	2300      	movs	r3, #0
 8000350:	617b      	str	r3, [r7, #20]

  // Read 4 first bytes from FW, the stack pointer
  u32FirmwareStackPointerAddress = *pu32FwFlashPointer;
 8000352:	69fb      	ldr	r3, [r7, #28]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	627b      	str	r3, [r7, #36]	; 0x24
  // Read 4 next bytes from FW, reset handler address
  pu32FwFlashPointer++;
 8000358:	69fb      	ldr	r3, [r7, #28]
 800035a:	3304      	adds	r3, #4
 800035c:	61fb      	str	r3, [r7, #28]
  u32FirmwareResetHandlerAddress = *pu32FwFlashPointer;
 800035e:	69fb      	ldr	r3, [r7, #28]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	623b      	str	r3, [r7, #32]
  // Patch it with offset
  u32FirmwareResetHandlerAddress += u32FirmwareOffset;
 8000364:	69bb      	ldr	r3, [r7, #24]
 8000366:	6a3a      	ldr	r2, [r7, #32]
 8000368:	4413      	add	r3, r2
 800036a:	623b      	str	r3, [r7, #32]

  // Calculate simple checksum of the registers to be passed
  u32RegistersChecksum = u32FirmwareAddress ^ u32FirmwareOffset;
 800036c:	687a      	ldr	r2, [r7, #4]
 800036e:	69bb      	ldr	r3, [r7, #24]
 8000370:	4053      	eors	r3, r2
 8000372:	617b      	str	r3, [r7, #20]

  if (vPlatformSpecificDeinit != NULL)
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <vDeInitAndJumpToMainFirmware+0x50>
  {
    vPlatformSpecificDeinit();
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	4798      	blx	r3
  // firmware via registers. After this the firmware knows what should be done and
  // it does things (system memory remapping, vector table things,
  // global offset table operations) autonomously.

  // Store firmware absolute address to r10 (hoop in case we have limited Cortex-M0)
  asm ("ldr r6, %0; mov r10, r6"
 800037e:	687e      	ldr	r6, [r7, #4]
 8000380:	46b2      	mov	sl, r6
      :"=m"(u32FirmwareAddress)
      :
      :);

  // Store firmware offset to r11 (hoop in case we have limited Cortex-M0)
  asm ("ldr r6, %0; mov r11, r6;"
 8000382:	69be      	ldr	r6, [r7, #24]
 8000384:	46b3      	mov	fp, r6
      :"=m"(u32FirmwareOffset)
      :
      :);

  // Store registers checksum to r12 (hoop in case we have limited Cortex-M0)
  asm ("ldr r6, %0; mov r12, r6;"
 8000386:	697e      	ldr	r6, [r7, #20]
 8000388:	46b4      	mov	ip, r6
      :"=m"(u32RegistersChecksum)
      :
      :);

  // Actual jump
  asm("mov sp, %0; bx %1;" : : "r"(u32FirmwareStackPointerAddress), "r"(u32FirmwareResetHandlerAddress));
 800038a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800038c:	6a3a      	ldr	r2, [r7, #32]
 800038e:	469d      	mov	sp, r3
 8000390:	4710      	bx	r2

}
 8000392:	bf00      	nop
 8000394:	3728      	adds	r7, #40	; 0x28
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
	...

0800039c <vL432kc_DeInit>:
static void SystemClock_Config(void);
static void MX_GPIO_Init(void);


static void vL432kc_DeInit(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a0:	b672      	cpsid	i
}
 80003a2:	bf00      	nop
  // Deinitialization parts from
  // https://github.com/viktorvano/STM32-Bootloader/blob/master/STM32F103C8T6_Bootloader/Core/Inc/bootloader.h

  __disable_irq();

  HAL_GPIO_DeInit(LD3_GPIO_Port, LD3_Pin);
 80003a4:	2108      	movs	r1, #8
 80003a6:	4812      	ldr	r0, [pc, #72]	; (80003f0 <vL432kc_DeInit+0x54>)
 80003a8:	f000 fcda 	bl	8000d60 <HAL_GPIO_DeInit>
  __HAL_RCC_GPIOC_CLK_DISABLE();
 80003ac:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <vL432kc_DeInit+0x58>)
 80003ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b0:	4a10      	ldr	r2, [pc, #64]	; (80003f4 <vL432kc_DeInit+0x58>)
 80003b2:	f023 0304 	bic.w	r3, r3, #4
 80003b6:	64d3      	str	r3, [r2, #76]	; 0x4c
  __HAL_RCC_GPIOA_CLK_DISABLE();
 80003b8:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <vL432kc_DeInit+0x58>)
 80003ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003bc:	4a0d      	ldr	r2, [pc, #52]	; (80003f4 <vL432kc_DeInit+0x58>)
 80003be:	f023 0301 	bic.w	r3, r3, #1
 80003c2:	64d3      	str	r3, [r2, #76]	; 0x4c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 80003c4:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <vL432kc_DeInit+0x58>)
 80003c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c8:	4a0a      	ldr	r2, [pc, #40]	; (80003f4 <vL432kc_DeInit+0x58>)
 80003ca:	f023 0302 	bic.w	r3, r3, #2
 80003ce:	64d3      	str	r3, [r2, #76]	; 0x4c
  HAL_RCC_DeInit();
 80003d0:	f000 fe36 	bl	8001040 <HAL_RCC_DeInit>
  HAL_DeInit();
 80003d4:	f000 f9dc 	bl	8000790 <HAL_DeInit>

  SysTick->CTRL = 0;
 80003d8:	4b07      	ldr	r3, [pc, #28]	; (80003f8 <vL432kc_DeInit+0x5c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 80003de:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <vL432kc_DeInit+0x5c>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 80003e4:	4b04      	ldr	r3, [pc, #16]	; (80003f8 <vL432kc_DeInit+0x5c>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	609a      	str	r2, [r3, #8]
}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	48000400 	.word	0x48000400
 80003f4:	40021000 	.word	0x40021000
 80003f8:	e000e010 	.word	0xe000e010

080003fc <main>:




int main(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
  uint32_t u32LedCounter = 0;
 8000402:	2300      	movs	r3, #0
 8000404:	607b      	str	r3, [r7, #4]
  uint32_t u32JumpAddress = FLASH_FWAREA_BEGIN; // Default jump address
 8000406:	4b1c      	ldr	r3, [pc, #112]	; (8000478 <main+0x7c>)
 8000408:	603b      	str	r3, [r7, #0]

  HAL_Init();
 800040a:	f000 f9a8 	bl	800075e <HAL_Init>
  SystemClock_Config();
 800040e:	f000 f83f 	bl	8000490 <SystemClock_Config>
  MX_GPIO_Init();
 8000412:	f000 f89f 	bl	8000554 <MX_GPIO_Init>

  // the LED on during our flash scavenging
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000416:	2201      	movs	r2, #1
 8000418:	2108      	movs	r1, #8
 800041a:	4818      	ldr	r0, [pc, #96]	; (800047c <main+0x80>)
 800041c:	f000 fd6a 	bl	8000ef4 <HAL_GPIO_WritePin>

  // Go check if we get better idea about start address than the default
  vScanMainFirmwareFlashAddress(&u32JumpAddress, FLASH_FWAREA_BEGIN, FLASH_FWAREA_END_BOUNDARY);
 8000420:	4915      	ldr	r1, [pc, #84]	; (8000478 <main+0x7c>)
 8000422:	4a17      	ldr	r2, [pc, #92]	; (8000480 <main+0x84>)
 8000424:	463b      	mov	r3, r7
 8000426:	4618      	mov	r0, r3
 8000428:	f7ff fed0 	bl	80001cc <vScanMainFirmwareFlashAddress>

  // Run high frequency for a brief while, then jump
  for (u32LedCounter = 0; u32LedCounter < 0x120000; u32LedCounter++)
 800042c:	2300      	movs	r3, #0
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	e011      	b.n	8000456 <main+0x5a>
  {
    if ((u32LedCounter % 0xFFFF) == 0)
 8000432:	6879      	ldr	r1, [r7, #4]
 8000434:	4b13      	ldr	r3, [pc, #76]	; (8000484 <main+0x88>)
 8000436:	fba3 2301 	umull	r2, r3, r3, r1
 800043a:	0bda      	lsrs	r2, r3, #15
 800043c:	4613      	mov	r3, r2
 800043e:	041b      	lsls	r3, r3, #16
 8000440:	1a9b      	subs	r3, r3, r2
 8000442:	1aca      	subs	r2, r1, r3
 8000444:	2a00      	cmp	r2, #0
 8000446:	d103      	bne.n	8000450 <main+0x54>
    {
      HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000448:	2108      	movs	r1, #8
 800044a:	480c      	ldr	r0, [pc, #48]	; (800047c <main+0x80>)
 800044c:	f000 fd6a 	bl	8000f24 <HAL_GPIO_TogglePin>
  for (u32LedCounter = 0; u32LedCounter < 0x120000; u32LedCounter++)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	3301      	adds	r3, #1
 8000454:	607b      	str	r3, [r7, #4]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800045c:	d3e9      	bcc.n	8000432 <main+0x36>
    }
  }

  // Finally leave the LED off
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800045e:	2200      	movs	r2, #0
 8000460:	2108      	movs	r1, #8
 8000462:	4806      	ldr	r0, [pc, #24]	; (800047c <main+0x80>)
 8000464:	f000 fd46 	bl	8000ef4 <HAL_GPIO_WritePin>

  // Deinit and jump
  vDeInitAndJumpToMainFirmware(&vL432kc_DeInit, FLASH_BOOTLOADER_BEGIN, u32JumpAddress);
 8000468:	4907      	ldr	r1, [pc, #28]	; (8000488 <main+0x8c>)
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	461a      	mov	r2, r3
 800046e:	4807      	ldr	r0, [pc, #28]	; (800048c <main+0x90>)
 8000470:	f7ff ff5d 	bl	800032e <vDeInitAndJumpToMainFirmware>

  while (1)
 8000474:	e7fe      	b.n	8000474 <main+0x78>
 8000476:	bf00      	nop
 8000478:	08005000 	.word	0x08005000
 800047c:	48000400 	.word	0x48000400
 8000480:	08040000 	.word	0x08040000
 8000484:	80008001 	.word	0x80008001
 8000488:	08000000 	.word	0x08000000
 800048c:	0800039d 	.word	0x0800039d

08000490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b096      	sub	sp, #88	; 0x58
 8000494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000496:	f107 0314 	add.w	r3, r7, #20
 800049a:	2244      	movs	r2, #68	; 0x44
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f001 fca4 	bl	8001dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a4:	463b      	mov	r3, r7
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
 80004b0:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80004b2:	f000 fd51 	bl	8000f58 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80004b6:	4b26      	ldr	r3, [pc, #152]	; (8000550 <SystemClock_Config+0xc0>)
 80004b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80004bc:	4a24      	ldr	r2, [pc, #144]	; (8000550 <SystemClock_Config+0xc0>)
 80004be:	f023 0318 	bic.w	r3, r3, #24
 80004c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80004c6:	2314      	movs	r3, #20
 80004c8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80004ca:	2301      	movs	r3, #1
 80004cc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004ce:	2301      	movs	r3, #1
 80004d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80004d6:	2360      	movs	r3, #96	; 0x60
 80004d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004da:	2302      	movs	r3, #2
 80004dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80004de:	2301      	movs	r3, #1
 80004e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80004e2:	2301      	movs	r3, #1
 80004e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80004e6:	2310      	movs	r3, #16
 80004e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80004ea:	2307      	movs	r3, #7
 80004ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004ee:	2302      	movs	r3, #2
 80004f0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004f2:	2302      	movs	r3, #2
 80004f4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f6:	f107 0314 	add.w	r3, r7, #20
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 fe38 	bl	8001170 <HAL_RCC_OscConfig>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000506:	f000 f86f 	bl	80005e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800050a:	230f      	movs	r3, #15
 800050c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800050e:	2303      	movs	r3, #3
 8000510:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000512:	2300      	movs	r3, #0
 8000514:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000516:	2300      	movs	r3, #0
 8000518:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800051e:	463b      	mov	r3, r7
 8000520:	2101      	movs	r1, #1
 8000522:	4618      	mov	r0, r3
 8000524:	f001 fa44 	bl	80019b0 <HAL_RCC_ClockConfig>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800052e:	f000 f85b 	bl	80005e8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000532:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000536:	f000 fd2d 	bl	8000f94 <HAL_PWREx_ControlVoltageScaling>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000540:	f000 f852 	bl	80005e8 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000544:	f001 fc02 	bl	8001d4c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000548:	bf00      	nop
 800054a:	3758      	adds	r7, #88	; 0x58
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40021000 	.word	0x40021000

08000554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b088      	sub	sp, #32
 8000558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055a:	f107 030c 	add.w	r3, r7, #12
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056a:	4b1d      	ldr	r3, [pc, #116]	; (80005e0 <MX_GPIO_Init+0x8c>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056e:	4a1c      	ldr	r2, [pc, #112]	; (80005e0 <MX_GPIO_Init+0x8c>)
 8000570:	f043 0304 	orr.w	r3, r3, #4
 8000574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000576:	4b1a      	ldr	r3, [pc, #104]	; (80005e0 <MX_GPIO_Init+0x8c>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	f003 0304 	and.w	r3, r3, #4
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000582:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <MX_GPIO_Init+0x8c>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	4a16      	ldr	r2, [pc, #88]	; (80005e0 <MX_GPIO_Init+0x8c>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058e:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <MX_GPIO_Init+0x8c>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059a:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <MX_GPIO_Init+0x8c>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	4a10      	ldr	r2, [pc, #64]	; (80005e0 <MX_GPIO_Init+0x8c>)
 80005a0:	f043 0302 	orr.w	r3, r3, #2
 80005a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <MX_GPIO_Init+0x8c>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	f003 0302 	and.w	r3, r3, #2
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2108      	movs	r1, #8
 80005b6:	480b      	ldr	r0, [pc, #44]	; (80005e4 <MX_GPIO_Init+0x90>)
 80005b8:	f000 fc9c 	bl	8000ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80005bc:	2308      	movs	r3, #8
 80005be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c0:	2301      	movs	r3, #1
 80005c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	4619      	mov	r1, r3
 80005d2:	4804      	ldr	r0, [pc, #16]	; (80005e4 <MX_GPIO_Init+0x90>)
 80005d4:	f000 fa5a 	bl	8000a8c <HAL_GPIO_Init>

}
 80005d8:	bf00      	nop
 80005da:	3720      	adds	r7, #32
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40021000 	.word	0x40021000
 80005e4:	48000400 	.word	0x48000400

080005e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80005ec:	b672      	cpsid	i
}
 80005ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <Error_Handler+0x8>
	...

080005f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <HAL_MspInit+0x44>)
 80005fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005fe:	4a0e      	ldr	r2, [pc, #56]	; (8000638 <HAL_MspInit+0x44>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6613      	str	r3, [r2, #96]	; 0x60
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <HAL_MspInit+0x44>)
 8000608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <HAL_MspInit+0x44>)
 8000614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000616:	4a08      	ldr	r2, [pc, #32]	; (8000638 <HAL_MspInit+0x44>)
 8000618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061c:	6593      	str	r3, [r2, #88]	; 0x58
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_MspInit+0x44>)
 8000620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40021000 	.word	0x40021000

0800063c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000640:	e7fe      	b.n	8000640 <NMI_Handler+0x4>
	...

08000644 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  uint32_t u32Cfsr = *((uint32_t*)0xE000ED28);
 800064a:	4b03      	ldr	r3, [pc, #12]	; (8000658 <HardFault_Handler+0x14>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	607b      	str	r3, [r7, #4]
  u32Cfsr += 0; // To stop compile nags

  uint32_t u32Bfar = *((uint32_t*)0xE000ED38);
 8000650:	4b02      	ldr	r3, [pc, #8]	; (800065c <HardFault_Handler+0x18>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	603b      	str	r3, [r7, #0]
  u32Bfar += 0; // To stop compile nags

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000656:	e7fe      	b.n	8000656 <HardFault_Handler+0x12>
 8000658:	e000ed28 	.word	0xe000ed28
 800065c:	e000ed38 	.word	0xe000ed38

08000660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <MemManage_Handler+0x4>

08000666 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800066a:	e7fe      	b.n	800066a <BusFault_Handler+0x4>

0800066c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000670:	e7fe      	b.n	8000670 <UsageFault_Handler+0x4>

08000672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a0:	f000 f8ee 	bl	8000880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006ac:	4b15      	ldr	r3, [pc, #84]	; (8000704 <SystemInit+0x5c>)
 80006ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006b2:	4a14      	ldr	r2, [pc, #80]	; (8000704 <SystemInit+0x5c>)
 80006b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <SystemInit+0x60>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a11      	ldr	r2, [pc, #68]	; (8000708 <SystemInit+0x60>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <SystemInit+0x60>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <SystemInit+0x60>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a0d      	ldr	r2, [pc, #52]	; (8000708 <SystemInit+0x60>)
 80006d4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80006d8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80006dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <SystemInit+0x60>)
 80006e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006e4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <SystemInit+0x60>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a07      	ldr	r2, [pc, #28]	; (8000708 <SystemInit+0x60>)
 80006ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80006f2:	4b05      	ldr	r3, [pc, #20]	; (8000708 <SystemInit+0x60>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000ed00 	.word	0xe000ed00
 8000708:	40021000 	.word	0x40021000

0800070c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800070c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000744 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000710:	f7ff ffca 	bl	80006a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000714:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000716:	e003      	b.n	8000720 <LoopCopyDataInit>

08000718 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000718:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800071a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800071c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800071e:	3104      	adds	r1, #4

08000720 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000720:	480a      	ldr	r0, [pc, #40]	; (800074c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000724:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000726:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000728:	d3f6      	bcc.n	8000718 <CopyDataInit>
	ldr	r2, =_sbss
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <LoopForever+0x12>)
	b	LoopFillZerobss
 800072c:	e002      	b.n	8000734 <LoopFillZerobss>

0800072e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800072e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000730:	f842 3b04 	str.w	r3, [r2], #4

08000734 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000734:	4b08      	ldr	r3, [pc, #32]	; (8000758 <LoopForever+0x16>)
	cmp	r2, r3
 8000736:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000738:	d3f9      	bcc.n	800072e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800073a:	f001 fb17 	bl	8001d6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800073e:	f7ff fe5d 	bl	80003fc <main>

08000742 <LoopForever>:

LoopForever:
    b LoopForever
 8000742:	e7fe      	b.n	8000742 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000744:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000748:	08001e5c 	.word	0x08001e5c
	ldr	r0, =_sdata
 800074c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000750:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000754:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000758:	2000002c 	.word	0x2000002c

0800075c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800075c:	e7fe      	b.n	800075c <ADC1_IRQHandler>

0800075e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b082      	sub	sp, #8
 8000762:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000764:	2300      	movs	r3, #0
 8000766:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000768:	2003      	movs	r0, #3
 800076a:	f000 f95b 	bl	8000a24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800076e:	2000      	movs	r0, #0
 8000770:	f000 f84a 	bl	8000808 <HAL_InitTick>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d002      	beq.n	8000780 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800077a:	2301      	movs	r3, #1
 800077c:	71fb      	strb	r3, [r7, #7]
 800077e:	e001      	b.n	8000784 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000780:	f7ff ff38 	bl	80005f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000784:	79fb      	ldrb	r3, [r7, #7]
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <HAL_DeInit>:
  * @brief De-initialize common part of the HAL and stop the source of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000794:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <HAL_DeInit+0x64>)
 8000796:	f04f 32ff 	mov.w	r2, #4294967295
 800079a:	639a      	str	r2, [r3, #56]	; 0x38
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <HAL_DeInit+0x64>)
 800079e:	f04f 32ff 	mov.w	r2, #4294967295
 80007a2:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_RCC_APB1_RELEASE_RESET();
 80007a4:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <HAL_DeInit+0x64>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	639a      	str	r2, [r3, #56]	; 0x38
 80007aa:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <HAL_DeInit+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	63da      	str	r2, [r3, #60]	; 0x3c

  __HAL_RCC_APB2_FORCE_RESET();
 80007b0:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <HAL_DeInit+0x64>)
 80007b2:	f04f 32ff 	mov.w	r2, #4294967295
 80007b6:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <HAL_DeInit+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	641a      	str	r2, [r3, #64]	; 0x40

  __HAL_RCC_AHB1_FORCE_RESET();
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <HAL_DeInit+0x64>)
 80007c0:	f04f 32ff 	mov.w	r2, #4294967295
 80007c4:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <HAL_DeInit+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	629a      	str	r2, [r3, #40]	; 0x28

  __HAL_RCC_AHB2_FORCE_RESET();
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <HAL_DeInit+0x64>)
 80007ce:	f04f 32ff 	mov.w	r2, #4294967295
 80007d2:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
 80007d4:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <HAL_DeInit+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_AHB3_FORCE_RESET();
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <HAL_DeInit+0x64>)
 80007dc:	f04f 32ff 	mov.w	r2, #4294967295
 80007e0:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
 80007e2:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <HAL_DeInit+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	631a      	str	r2, [r3, #48]	; 0x30

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80007e8:	f000 f806 	bl	80007f8 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40021000 	.word	0x40021000

080007f8 <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000810:	2300      	movs	r3, #0
 8000812:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000814:	4b17      	ldr	r3, [pc, #92]	; (8000874 <HAL_InitTick+0x6c>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d023      	beq.n	8000864 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800081c:	4b16      	ldr	r3, [pc, #88]	; (8000878 <HAL_InitTick+0x70>)
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <HAL_InitTick+0x6c>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	4619      	mov	r1, r3
 8000826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082a:	fbb3 f3f1 	udiv	r3, r3, r1
 800082e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000832:	4618      	mov	r0, r3
 8000834:	f000 f91d 	bl	8000a72 <HAL_SYSTICK_Config>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d10f      	bne.n	800085e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2b0f      	cmp	r3, #15
 8000842:	d809      	bhi.n	8000858 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000844:	2200      	movs	r2, #0
 8000846:	6879      	ldr	r1, [r7, #4]
 8000848:	f04f 30ff 	mov.w	r0, #4294967295
 800084c:	f000 f8f5 	bl	8000a3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000850:	4a0a      	ldr	r2, [pc, #40]	; (800087c <HAL_InitTick+0x74>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6013      	str	r3, [r2, #0]
 8000856:	e007      	b.n	8000868 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000858:	2301      	movs	r3, #1
 800085a:	73fb      	strb	r3, [r7, #15]
 800085c:	e004      	b.n	8000868 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800085e:	2301      	movs	r3, #1
 8000860:	73fb      	strb	r3, [r7, #15]
 8000862:	e001      	b.n	8000868 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000864:	2301      	movs	r3, #1
 8000866:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000868:	7bfb      	ldrb	r3, [r7, #15]
}
 800086a:	4618      	mov	r0, r3
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000008 	.word	0x20000008
 8000878:	20000000 	.word	0x20000000
 800087c:	20000004 	.word	0x20000004

08000880 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_IncTick+0x20>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	461a      	mov	r2, r3
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <HAL_IncTick+0x24>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4413      	add	r3, r2
 8000890:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <HAL_IncTick+0x24>)
 8000892:	6013      	str	r3, [r2, #0]
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	20000008 	.word	0x20000008
 80008a4:	20000028 	.word	0x20000028

080008a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  return uwTick;
 80008ac:	4b03      	ldr	r3, [pc, #12]	; (80008bc <HAL_GetTick+0x14>)
 80008ae:	681b      	ldr	r3, [r3, #0]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	20000028 	.word	0x20000028

080008c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <__NVIC_SetPriorityGrouping+0x44>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008dc:	4013      	ands	r3, r2
 80008de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008f2:	4a04      	ldr	r2, [pc, #16]	; (8000904 <__NVIC_SetPriorityGrouping+0x44>)
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	60d3      	str	r3, [r2, #12]
}
 80008f8:	bf00      	nop
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <__NVIC_GetPriorityGrouping+0x18>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	0a1b      	lsrs	r3, r3, #8
 8000912:	f003 0307 	and.w	r3, r3, #7
}
 8000916:	4618      	mov	r0, r3
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	6039      	str	r1, [r7, #0]
 800092e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000934:	2b00      	cmp	r3, #0
 8000936:	db0a      	blt.n	800094e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	b2da      	uxtb	r2, r3
 800093c:	490c      	ldr	r1, [pc, #48]	; (8000970 <__NVIC_SetPriority+0x4c>)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	0112      	lsls	r2, r2, #4
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	440b      	add	r3, r1
 8000948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800094c:	e00a      	b.n	8000964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4908      	ldr	r1, [pc, #32]	; (8000974 <__NVIC_SetPriority+0x50>)
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	3b04      	subs	r3, #4
 800095c:	0112      	lsls	r2, r2, #4
 800095e:	b2d2      	uxtb	r2, r2
 8000960:	440b      	add	r3, r1
 8000962:	761a      	strb	r2, [r3, #24]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	e000e100 	.word	0xe000e100
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000978:	b480      	push	{r7}
 800097a:	b089      	sub	sp, #36	; 0x24
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	f1c3 0307 	rsb	r3, r3, #7
 8000992:	2b04      	cmp	r3, #4
 8000994:	bf28      	it	cs
 8000996:	2304      	movcs	r3, #4
 8000998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3304      	adds	r3, #4
 800099e:	2b06      	cmp	r3, #6
 80009a0:	d902      	bls.n	80009a8 <NVIC_EncodePriority+0x30>
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3b03      	subs	r3, #3
 80009a6:	e000      	b.n	80009aa <NVIC_EncodePriority+0x32>
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ac:	f04f 32ff 	mov.w	r2, #4294967295
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43da      	mvns	r2, r3
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	401a      	ands	r2, r3
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c0:	f04f 31ff 	mov.w	r1, #4294967295
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ca:	43d9      	mvns	r1, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	4313      	orrs	r3, r2
         );
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3724      	adds	r7, #36	; 0x24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
	...

080009e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009f0:	d301      	bcc.n	80009f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009f2:	2301      	movs	r3, #1
 80009f4:	e00f      	b.n	8000a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009f6:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <SysTick_Config+0x40>)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009fe:	210f      	movs	r1, #15
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	f7ff ff8e 	bl	8000924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <SysTick_Config+0x40>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a0e:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <SysTick_Config+0x40>)
 8000a10:	2207      	movs	r2, #7
 8000a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	e000e010 	.word	0xe000e010

08000a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff ff47 	bl	80008c0 <__NVIC_SetPriorityGrouping>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b086      	sub	sp, #24
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	4603      	mov	r3, r0
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	607a      	str	r2, [r7, #4]
 8000a46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a4c:	f7ff ff5c 	bl	8000908 <__NVIC_GetPriorityGrouping>
 8000a50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	68b9      	ldr	r1, [r7, #8]
 8000a56:	6978      	ldr	r0, [r7, #20]
 8000a58:	f7ff ff8e 	bl	8000978 <NVIC_EncodePriority>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a62:	4611      	mov	r1, r2
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff5d 	bl	8000924 <__NVIC_SetPriority>
}
 8000a6a:	bf00      	nop
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff ffb0 	bl	80009e0 <SysTick_Config>
 8000a80:	4603      	mov	r3, r0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b087      	sub	sp, #28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a9a:	e148      	b.n	8000d2e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	f000 813a 	beq.w	8000d28 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d00b      	beq.n	8000ad4 <HAL_GPIO_Init+0x48>
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d007      	beq.n	8000ad4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ac8:	2b11      	cmp	r3, #17
 8000aca:	d003      	beq.n	8000ad4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	2b12      	cmp	r3, #18
 8000ad2:	d130      	bne.n	8000b36 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	2203      	movs	r2, #3
 8000ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	68da      	ldr	r2, [r3, #12]
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43db      	mvns	r3, r3
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	4013      	ands	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	091b      	lsrs	r3, r3, #4
 8000b20:	f003 0201 	and.w	r2, r3, #1
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	2203      	movs	r2, #3
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43db      	mvns	r3, r3
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	689a      	ldr	r2, [r3, #8]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d003      	beq.n	8000b76 <HAL_GPIO_Init+0xea>
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	2b12      	cmp	r3, #18
 8000b74:	d123      	bne.n	8000bbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	08da      	lsrs	r2, r3, #3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	3208      	adds	r2, #8
 8000b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	220f      	movs	r2, #15
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43db      	mvns	r3, r3
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	4013      	ands	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	691a      	ldr	r2, [r3, #16]
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	f003 0307 	and.w	r3, r3, #7
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	08da      	lsrs	r2, r3, #3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3208      	adds	r2, #8
 8000bb8:	6939      	ldr	r1, [r7, #16]
 8000bba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	2203      	movs	r2, #3
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43db      	mvns	r3, r3
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f003 0203 	and.w	r2, r3, #3
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f000 8094 	beq.w	8000d28 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c00:	4b52      	ldr	r3, [pc, #328]	; (8000d4c <HAL_GPIO_Init+0x2c0>)
 8000c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c04:	4a51      	ldr	r2, [pc, #324]	; (8000d4c <HAL_GPIO_Init+0x2c0>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	6613      	str	r3, [r2, #96]	; 0x60
 8000c0c:	4b4f      	ldr	r3, [pc, #316]	; (8000d4c <HAL_GPIO_Init+0x2c0>)
 8000c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c18:	4a4d      	ldr	r2, [pc, #308]	; (8000d50 <HAL_GPIO_Init+0x2c4>)
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	089b      	lsrs	r3, r3, #2
 8000c1e:	3302      	adds	r3, #2
 8000c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	f003 0303 	and.w	r3, r3, #3
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	220f      	movs	r2, #15
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	43db      	mvns	r3, r3
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c42:	d00d      	beq.n	8000c60 <HAL_GPIO_Init+0x1d4>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a43      	ldr	r2, [pc, #268]	; (8000d54 <HAL_GPIO_Init+0x2c8>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d007      	beq.n	8000c5c <HAL_GPIO_Init+0x1d0>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a42      	ldr	r2, [pc, #264]	; (8000d58 <HAL_GPIO_Init+0x2cc>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d101      	bne.n	8000c58 <HAL_GPIO_Init+0x1cc>
 8000c54:	2302      	movs	r3, #2
 8000c56:	e004      	b.n	8000c62 <HAL_GPIO_Init+0x1d6>
 8000c58:	2307      	movs	r3, #7
 8000c5a:	e002      	b.n	8000c62 <HAL_GPIO_Init+0x1d6>
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e000      	b.n	8000c62 <HAL_GPIO_Init+0x1d6>
 8000c60:	2300      	movs	r3, #0
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	f002 0203 	and.w	r2, r2, #3
 8000c68:	0092      	lsls	r2, r2, #2
 8000c6a:	4093      	lsls	r3, r2
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c72:	4937      	ldr	r1, [pc, #220]	; (8000d50 <HAL_GPIO_Init+0x2c4>)
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	089b      	lsrs	r3, r3, #2
 8000c78:	3302      	adds	r3, #2
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000c80:	4b36      	ldr	r3, [pc, #216]	; (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d003      	beq.n	8000ca4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ca4:	4a2d      	ldr	r2, [pc, #180]	; (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000caa:	4b2c      	ldr	r3, [pc, #176]	; (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cce:	4a23      	ldr	r2, [pc, #140]	; (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cd4:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d003      	beq.n	8000cf8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000cf8:	4a18      	ldr	r2, [pc, #96]	; (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000cfe:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	43db      	mvns	r3, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d003      	beq.n	8000d22 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d22:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	fa22 f303 	lsr.w	r3, r2, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	f47f aeaf 	bne.w	8000a9c <HAL_GPIO_Init+0x10>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	bf00      	nop
 8000d42:	371c      	adds	r7, #28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	40010000 	.word	0x40010000
 8000d54:	48000400 	.word	0x48000400
 8000d58:	48000800 	.word	0x48000800
 8000d5c:	40010400 	.word	0x40010400

08000d60 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b087      	sub	sp, #28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8000d6e:	e0ab      	b.n	8000ec8 <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000d70:	2201      	movs	r2, #1
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	683a      	ldr	r2, [r7, #0]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	f000 809e 	beq.w	8000ec2 <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8000d86:	4a57      	ldr	r2, [pc, #348]	; (8000ee4 <HAL_GPIO_DeInit+0x184>)
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	089b      	lsrs	r3, r3, #2
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d92:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	f003 0303 	and.w	r3, r3, #3
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	220f      	movs	r2, #15
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	4013      	ands	r3, r2
 8000da6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dae:	d00d      	beq.n	8000dcc <HAL_GPIO_DeInit+0x6c>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a4d      	ldr	r2, [pc, #308]	; (8000ee8 <HAL_GPIO_DeInit+0x188>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d007      	beq.n	8000dc8 <HAL_GPIO_DeInit+0x68>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a4c      	ldr	r2, [pc, #304]	; (8000eec <HAL_GPIO_DeInit+0x18c>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d101      	bne.n	8000dc4 <HAL_GPIO_DeInit+0x64>
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	e004      	b.n	8000dce <HAL_GPIO_DeInit+0x6e>
 8000dc4:	2307      	movs	r3, #7
 8000dc6:	e002      	b.n	8000dce <HAL_GPIO_DeInit+0x6e>
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e000      	b.n	8000dce <HAL_GPIO_DeInit+0x6e>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	697a      	ldr	r2, [r7, #20]
 8000dd0:	f002 0203 	and.w	r2, r2, #3
 8000dd4:	0092      	lsls	r2, r2, #2
 8000dd6:	4093      	lsls	r3, r2
 8000dd8:	68fa      	ldr	r2, [r7, #12]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d132      	bne.n	8000e44 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8000dde:	4b44      	ldr	r3, [pc, #272]	; (8000ef0 <HAL_GPIO_DeInit+0x190>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	4942      	ldr	r1, [pc, #264]	; (8000ef0 <HAL_GPIO_DeInit+0x190>)
 8000de8:	4013      	ands	r3, r2
 8000dea:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8000dec:	4b40      	ldr	r3, [pc, #256]	; (8000ef0 <HAL_GPIO_DeInit+0x190>)
 8000dee:	685a      	ldr	r2, [r3, #4]
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	43db      	mvns	r3, r3
 8000df4:	493e      	ldr	r1, [pc, #248]	; (8000ef0 <HAL_GPIO_DeInit+0x190>)
 8000df6:	4013      	ands	r3, r2
 8000df8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8000dfa:	4b3d      	ldr	r3, [pc, #244]	; (8000ef0 <HAL_GPIO_DeInit+0x190>)
 8000dfc:	689a      	ldr	r2, [r3, #8]
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	493b      	ldr	r1, [pc, #236]	; (8000ef0 <HAL_GPIO_DeInit+0x190>)
 8000e04:	4013      	ands	r3, r2
 8000e06:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8000e08:	4b39      	ldr	r3, [pc, #228]	; (8000ef0 <HAL_GPIO_DeInit+0x190>)
 8000e0a:	68da      	ldr	r2, [r3, #12]
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	4937      	ldr	r1, [pc, #220]	; (8000ef0 <HAL_GPIO_DeInit+0x190>)
 8000e12:	4013      	ands	r3, r2
 8000e14:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	f003 0303 	and.w	r3, r3, #3
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	220f      	movs	r2, #15
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8000e26:	4a2f      	ldr	r2, [pc, #188]	; (8000ee4 <HAL_GPIO_DeInit+0x184>)
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	089b      	lsrs	r3, r3, #2
 8000e2c:	3302      	adds	r3, #2
 8000e2e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	43da      	mvns	r2, r3
 8000e36:	482b      	ldr	r0, [pc, #172]	; (8000ee4 <HAL_GPIO_DeInit+0x184>)
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	089b      	lsrs	r3, r3, #2
 8000e3c:	400a      	ands	r2, r1
 8000e3e:	3302      	adds	r3, #2
 8000e40:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	2103      	movs	r1, #3
 8000e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e52:	431a      	orrs	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	08da      	lsrs	r2, r3, #3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3208      	adds	r2, #8
 8000e60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	220f      	movs	r2, #15
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	08d2      	lsrs	r2, r2, #3
 8000e78:	4019      	ands	r1, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3208      	adds	r2, #8
 8000e7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689a      	ldr	r2, [r3, #8]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	2103      	movs	r1, #3
 8000e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	401a      	ands	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685a      	ldr	r2, [r3, #4]
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68da      	ldr	r2, [r3, #12]
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	2103      	movs	r1, #3
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	401a      	ands	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f47f af4d 	bne.w	8000d70 <HAL_GPIO_DeInit+0x10>
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	bf00      	nop
 8000eda:	371c      	adds	r7, #28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	40010000 	.word	0x40010000
 8000ee8:	48000400 	.word	0x48000400
 8000eec:	48000800 	.word	0x48000800
 8000ef0:	40010400 	.word	0x40010400

08000ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	807b      	strh	r3, [r7, #2]
 8000f00:	4613      	mov	r3, r2
 8000f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f04:	787b      	ldrb	r3, [r7, #1]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f0a:	887a      	ldrh	r2, [r7, #2]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f10:	e002      	b.n	8000f18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f12:	887a      	ldrh	r2, [r7, #2]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f36:	887a      	ldrh	r2, [r7, #2]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	041a      	lsls	r2, r3, #16
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	43d9      	mvns	r1, r3
 8000f42:	887b      	ldrh	r3, [r7, #2]
 8000f44:	400b      	ands	r3, r1
 8000f46:	431a      	orrs	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	619a      	str	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f66:	6013      	str	r3, [r2, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40007000 	.word	0x40007000

08000f78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40007000 	.word	0x40007000

08000f94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fa2:	d130      	bne.n	8001006 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fa4:	4b23      	ldr	r3, [pc, #140]	; (8001034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fb0:	d038      	beq.n	8001024 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb2:	4b20      	ldr	r3, [pc, #128]	; (8001034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fba:	4a1e      	ldr	r2, [pc, #120]	; (8001034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fc0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000fc2:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2232      	movs	r2, #50	; 0x32
 8000fc8:	fb02 f303 	mul.w	r3, r2, r3
 8000fcc:	4a1b      	ldr	r2, [pc, #108]	; (800103c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000fce:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd2:	0c9b      	lsrs	r3, r3, #18
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fd8:	e002      	b.n	8000fe0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fe2:	695b      	ldr	r3, [r3, #20]
 8000fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fec:	d102      	bne.n	8000ff4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1f2      	bne.n	8000fda <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001000:	d110      	bne.n	8001024 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e00f      	b.n	8001026 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800100e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001012:	d007      	beq.n	8001024 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001014:	4b07      	ldr	r3, [pc, #28]	; (8001034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800101c:	4a05      	ldr	r2, [pc, #20]	; (8001034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800101e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001022:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40007000 	.word	0x40007000
 8001038:	20000000 	.word	0x20000000
 800103c:	431bde83 	.word	0x431bde83

08001040 <HAL_RCC_DeInit>:
  *            - Peripheral clock sources
  *            - LSI, LSE and RTC clocks (Backup domain)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Reset to default System clock */
  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001046:	4b45      	ldr	r3, [pc, #276]	; (800115c <HAL_RCC_DeInit+0x11c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a44      	ldr	r2, [pc, #272]	; (800115c <HAL_RCC_DeInit+0x11c>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6013      	str	r3, [r2, #0]

  /* Insure MSIRDY bit is set before writing default MSIRANGE value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8001052:	f7ff fc29 	bl	80008a8 <HAL_GetTick>
 8001056:	6078      	str	r0, [r7, #4]

  /* Wait till MSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001058:	e008      	b.n	800106c <HAL_RCC_DeInit+0x2c>
  {
    if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800105a:	f7ff fc25 	bl	80008a8 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d901      	bls.n	800106c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e073      	b.n	8001154 <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800106c:	4b3b      	ldr	r3, [pc, #236]	; (800115c <HAL_RCC_DeInit+0x11c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d0f0      	beq.n	800105a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set MSIRANGE default value */
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 8001078:	4b38      	ldr	r3, [pc, #224]	; (800115c <HAL_RCC_DeInit+0x11c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001080:	4a36      	ldr	r2, [pc, #216]	; (800115c <HAL_RCC_DeInit+0x11c>)
 8001082:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001086:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register (MSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR);
 8001088:	4b34      	ldr	r3, [pc, #208]	; (800115c <HAL_RCC_DeInit+0x11c>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]

  /* Update the SystemCoreClock global variable for MSI as system clock source */
  SystemCoreClock = MSI_VALUE;
 800108e:	4b34      	ldr	r3, [pc, #208]	; (8001160 <HAL_RCC_DeInit+0x120>)
 8001090:	4a34      	ldr	r2, [pc, #208]	; (8001164 <HAL_RCC_DeInit+0x124>)
 8001092:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8001094:	4b34      	ldr	r3, [pc, #208]	; (8001168 <HAL_RCC_DeInit+0x128>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fbb5 	bl	8000808 <HAL_InitTick>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <HAL_RCC_DeInit+0x68>
  {
    return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e055      	b.n	8001154 <HAL_RCC_DeInit+0x114>
  }

  /* Insure MSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 80010a8:	f7ff fbfe 	bl	80008a8 <HAL_GetTick>
 80010ac:	6078      	str	r0, [r7, #4]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 80010ae:	e00a      	b.n	80010c6 <HAL_RCC_DeInit+0x86>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010b0:	f7ff fbfa 	bl	80008a8 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80010be:	4293      	cmp	r3, r2
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_DeInit+0x86>
    {
      return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e046      	b.n	8001154 <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 80010c6:	4b25      	ldr	r3, [pc, #148]	; (800115c <HAL_RCC_DeInit+0x11c>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f003 030c 	and.w	r3, r3, #12
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1ee      	bne.n	80010b0 <HAL_RCC_DeInit+0x70>

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);

#elif defined(RCC_PLLSAI1_SUPPORT)

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON);
 80010d2:	4b22      	ldr	r3, [pc, #136]	; (800115c <HAL_RCC_DeInit+0x11c>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	4921      	ldr	r1, [pc, #132]	; (800115c <HAL_RCC_DeInit+0x11c>)
 80010d8:	4b24      	ldr	r3, [pc, #144]	; (800116c <HAL_RCC_DeInit+0x12c>)
 80010da:	4013      	ands	r3, r2
 80010dc:	600b      	str	r3, [r1, #0]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Insure PLLRDY, PLLSAI1RDY and PLLSAI2RDY (if present) are reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 80010de:	f7ff fbe3 	bl	80008a8 <HAL_GetTick>
 80010e2:	6078      	str	r0, [r7, #4]

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)

#elif defined(RCC_PLLSAI1_SUPPORT)

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY) != 0U)
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_DeInit+0xb8>

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)

#endif
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010e6:	f7ff fbdf 	bl	80008a8 <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e02d      	b.n	8001154 <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY) != 0U)
 80010f8:	4b18      	ldr	r3, [pc, #96]	; (800115c <HAL_RCC_DeInit+0x11c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 6320 	and.w	r3, r3, #167772160	; 0xa000000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1f0      	bne.n	80010e6 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Reset PLLCFGR register */
  CLEAR_REG(RCC->PLLCFGR);
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <HAL_RCC_DeInit+0x11c>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
 800110a:	4b14      	ldr	r3, [pc, #80]	; (800115c <HAL_RCC_DeInit+0x11c>)
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	4a13      	ldr	r2, [pc, #76]	; (800115c <HAL_RCC_DeInit+0x11c>)
 8001110:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001114:	60d3      	str	r3, [r2, #12]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Reset PLLSAI1CFGR register */
  CLEAR_REG(RCC->PLLSAI1CFGR);
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <HAL_RCC_DeInit+0x11c>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 800111c:	4b0f      	ldr	r3, [pc, #60]	; (800115c <HAL_RCC_DeInit+0x11c>)
 800111e:	691b      	ldr	r3, [r3, #16]
 8001120:	4a0e      	ldr	r2, [pc, #56]	; (800115c <HAL_RCC_DeInit+0x11c>)
 8001122:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001126:	6113      	str	r3, [r2, #16]
  SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <HAL_RCC_DeInit+0x11c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0b      	ldr	r2, [pc, #44]	; (800115c <HAL_RCC_DeInit+0x11c>)
 800112e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001132:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <HAL_RCC_DeInit+0x11c>)
 8001136:	2200      	movs	r2, #0
 8001138:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <HAL_RCC_DeInit+0x11c>)
 800113c:	f04f 32ff 	mov.w	r2, #4294967295
 8001140:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_RCC_DeInit+0x11c>)
 8001144:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <HAL_RCC_DeInit+0x11c>)
 800114a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800114e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40021000 	.word	0x40021000
 8001160:	20000000 	.word	0x20000000
 8001164:	003d0900 	.word	0x003d0900
 8001168:	20000004 	.word	0x20000004
 800116c:	fafef4ff 	.word	0xfafef4ff

08001170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d102      	bne.n	8001184 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	f000 bc11 	b.w	80019a6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001184:	4ba0      	ldr	r3, [pc, #640]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 030c 	and.w	r3, r3, #12
 800118c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800118e:	4b9e      	ldr	r3, [pc, #632]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0310 	and.w	r3, r3, #16
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 80e4 	beq.w	800136e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d007      	beq.n	80011bc <HAL_RCC_OscConfig+0x4c>
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	2b0c      	cmp	r3, #12
 80011b0:	f040 808b 	bne.w	80012ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	f040 8087 	bne.w	80012ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011bc:	4b92      	ldr	r3, [pc, #584]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d005      	beq.n	80011d4 <HAL_RCC_OscConfig+0x64>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d101      	bne.n	80011d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e3e8      	b.n	80019a6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a1a      	ldr	r2, [r3, #32]
 80011d8:	4b8b      	ldr	r3, [pc, #556]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0308 	and.w	r3, r3, #8
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d004      	beq.n	80011ee <HAL_RCC_OscConfig+0x7e>
 80011e4:	4b88      	ldr	r3, [pc, #544]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011ec:	e005      	b.n	80011fa <HAL_RCC_OscConfig+0x8a>
 80011ee:	4b86      	ldr	r3, [pc, #536]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80011f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d223      	bcs.n	8001246 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	4618      	mov	r0, r3
 8001204:	f000 fd42 	bl	8001c8c <RCC_SetFlashLatencyFromMSIRange>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e3c9      	b.n	80019a6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001212:	4b7d      	ldr	r3, [pc, #500]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a7c      	ldr	r2, [pc, #496]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001218:	f043 0308 	orr.w	r3, r3, #8
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	4b7a      	ldr	r3, [pc, #488]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a1b      	ldr	r3, [r3, #32]
 800122a:	4977      	ldr	r1, [pc, #476]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 800122c:	4313      	orrs	r3, r2
 800122e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001230:	4b75      	ldr	r3, [pc, #468]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69db      	ldr	r3, [r3, #28]
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	4972      	ldr	r1, [pc, #456]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001240:	4313      	orrs	r3, r2
 8001242:	604b      	str	r3, [r1, #4]
 8001244:	e025      	b.n	8001292 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001246:	4b70      	ldr	r3, [pc, #448]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a6f      	ldr	r2, [pc, #444]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 800124c:	f043 0308 	orr.w	r3, r3, #8
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	4b6d      	ldr	r3, [pc, #436]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a1b      	ldr	r3, [r3, #32]
 800125e:	496a      	ldr	r1, [pc, #424]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001260:	4313      	orrs	r3, r2
 8001262:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001264:	4b68      	ldr	r3, [pc, #416]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69db      	ldr	r3, [r3, #28]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	4965      	ldr	r1, [pc, #404]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001274:	4313      	orrs	r3, r2
 8001276:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d109      	bne.n	8001292 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	4618      	mov	r0, r3
 8001284:	f000 fd02 	bl	8001c8c <RCC_SetFlashLatencyFromMSIRange>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e389      	b.n	80019a6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001292:	f000 fc6f 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 8001296:	4602      	mov	r2, r0
 8001298:	4b5b      	ldr	r3, [pc, #364]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	091b      	lsrs	r3, r3, #4
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	495a      	ldr	r1, [pc, #360]	; (800140c <HAL_RCC_OscConfig+0x29c>)
 80012a4:	5ccb      	ldrb	r3, [r1, r3]
 80012a6:	f003 031f 	and.w	r3, r3, #31
 80012aa:	fa22 f303 	lsr.w	r3, r2, r3
 80012ae:	4a58      	ldr	r2, [pc, #352]	; (8001410 <HAL_RCC_OscConfig+0x2a0>)
 80012b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012b2:	4b58      	ldr	r3, [pc, #352]	; (8001414 <HAL_RCC_OscConfig+0x2a4>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff faa6 	bl	8000808 <HAL_InitTick>
 80012bc:	4603      	mov	r3, r0
 80012be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d052      	beq.n	800136c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	e36d      	b.n	80019a6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d032      	beq.n	8001338 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012d2:	4b4d      	ldr	r3, [pc, #308]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a4c      	ldr	r2, [pc, #304]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012de:	f7ff fae3 	bl	80008a8 <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012e6:	f7ff fadf 	bl	80008a8 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e356      	b.n	80019a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012f8:	4b43      	ldr	r3, [pc, #268]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0f0      	beq.n	80012e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001304:	4b40      	ldr	r3, [pc, #256]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a3f      	ldr	r2, [pc, #252]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 800130a:	f043 0308 	orr.w	r3, r3, #8
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	4b3d      	ldr	r3, [pc, #244]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	493a      	ldr	r1, [pc, #232]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 800131e:	4313      	orrs	r3, r2
 8001320:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001322:	4b39      	ldr	r3, [pc, #228]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	021b      	lsls	r3, r3, #8
 8001330:	4935      	ldr	r1, [pc, #212]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001332:	4313      	orrs	r3, r2
 8001334:	604b      	str	r3, [r1, #4]
 8001336:	e01a      	b.n	800136e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001338:	4b33      	ldr	r3, [pc, #204]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a32      	ldr	r2, [pc, #200]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 800133e:	f023 0301 	bic.w	r3, r3, #1
 8001342:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001344:	f7ff fab0 	bl	80008a8 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800134c:	f7ff faac 	bl	80008a8 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e323      	b.n	80019a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800135e:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f0      	bne.n	800134c <HAL_RCC_OscConfig+0x1dc>
 800136a:	e000      	b.n	800136e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800136c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d073      	beq.n	8001462 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	2b08      	cmp	r3, #8
 800137e:	d005      	beq.n	800138c <HAL_RCC_OscConfig+0x21c>
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	2b0c      	cmp	r3, #12
 8001384:	d10e      	bne.n	80013a4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	2b03      	cmp	r3, #3
 800138a:	d10b      	bne.n	80013a4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138c:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d063      	beq.n	8001460 <HAL_RCC_OscConfig+0x2f0>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d15f      	bne.n	8001460 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e300      	b.n	80019a6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ac:	d106      	bne.n	80013bc <HAL_RCC_OscConfig+0x24c>
 80013ae:	4b16      	ldr	r3, [pc, #88]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a15      	ldr	r2, [pc, #84]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80013b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	e01d      	b.n	80013f8 <HAL_RCC_OscConfig+0x288>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013c4:	d10c      	bne.n	80013e0 <HAL_RCC_OscConfig+0x270>
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80013cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a0c      	ldr	r2, [pc, #48]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80013d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e00b      	b.n	80013f8 <HAL_RCC_OscConfig+0x288>
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a08      	ldr	r2, [pc, #32]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80013e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a05      	ldr	r2, [pc, #20]	; (8001408 <HAL_RCC_OscConfig+0x298>)
 80013f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d01b      	beq.n	8001438 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001400:	f7ff fa52 	bl	80008a8 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001406:	e010      	b.n	800142a <HAL_RCC_OscConfig+0x2ba>
 8001408:	40021000 	.word	0x40021000
 800140c:	08001e14 	.word	0x08001e14
 8001410:	20000000 	.word	0x20000000
 8001414:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001418:	f7ff fa46 	bl	80008a8 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b64      	cmp	r3, #100	; 0x64
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e2bd      	b.n	80019a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800142a:	4baf      	ldr	r3, [pc, #700]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0f0      	beq.n	8001418 <HAL_RCC_OscConfig+0x2a8>
 8001436:	e014      	b.n	8001462 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001438:	f7ff fa36 	bl	80008a8 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fa32 	bl	80008a8 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	; 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e2a9      	b.n	80019a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001452:	4ba5      	ldr	r3, [pc, #660]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x2d0>
 800145e:	e000      	b.n	8001462 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d060      	beq.n	8001530 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	2b04      	cmp	r3, #4
 8001472:	d005      	beq.n	8001480 <HAL_RCC_OscConfig+0x310>
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	2b0c      	cmp	r3, #12
 8001478:	d119      	bne.n	80014ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	2b02      	cmp	r3, #2
 800147e:	d116      	bne.n	80014ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001480:	4b99      	ldr	r3, [pc, #612]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001488:	2b00      	cmp	r3, #0
 800148a:	d005      	beq.n	8001498 <HAL_RCC_OscConfig+0x328>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e286      	b.n	80019a6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001498:	4b93      	ldr	r3, [pc, #588]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	061b      	lsls	r3, r3, #24
 80014a6:	4990      	ldr	r1, [pc, #576]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014ac:	e040      	b.n	8001530 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d023      	beq.n	80014fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b6:	4b8c      	ldr	r3, [pc, #560]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a8b      	ldr	r2, [pc, #556]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 80014bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c2:	f7ff f9f1 	bl	80008a8 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ca:	f7ff f9ed 	bl	80008a8 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e264      	b.n	80019a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014dc:	4b82      	ldr	r3, [pc, #520]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f0      	beq.n	80014ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e8:	4b7f      	ldr	r3, [pc, #508]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	061b      	lsls	r3, r3, #24
 80014f6:	497c      	ldr	r1, [pc, #496]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	604b      	str	r3, [r1, #4]
 80014fc:	e018      	b.n	8001530 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014fe:	4b7a      	ldr	r3, [pc, #488]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a79      	ldr	r2, [pc, #484]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150a:	f7ff f9cd 	bl	80008a8 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001512:	f7ff f9c9 	bl	80008a8 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e240      	b.n	80019a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001524:	4b70      	ldr	r3, [pc, #448]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1f0      	bne.n	8001512 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	2b00      	cmp	r3, #0
 800153a:	d03c      	beq.n	80015b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d01c      	beq.n	800157e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001544:	4b68      	ldr	r3, [pc, #416]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800154a:	4a67      	ldr	r2, [pc, #412]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001554:	f7ff f9a8 	bl	80008a8 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800155c:	f7ff f9a4 	bl	80008a8 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e21b      	b.n	80019a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800156e:	4b5e      	ldr	r3, [pc, #376]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0ef      	beq.n	800155c <HAL_RCC_OscConfig+0x3ec>
 800157c:	e01b      	b.n	80015b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800157e:	4b5a      	ldr	r3, [pc, #360]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001580:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001584:	4a58      	ldr	r2, [pc, #352]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001586:	f023 0301 	bic.w	r3, r3, #1
 800158a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158e:	f7ff f98b 	bl	80008a8 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001596:	f7ff f987 	bl	80008a8 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e1fe      	b.n	80019a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015a8:	4b4f      	ldr	r3, [pc, #316]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 80015aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1ef      	bne.n	8001596 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 80a6 	beq.w	8001710 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c4:	2300      	movs	r3, #0
 80015c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015c8:	4b47      	ldr	r3, [pc, #284]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 80015ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d10d      	bne.n	80015f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015d4:	4b44      	ldr	r3, [pc, #272]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 80015d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d8:	4a43      	ldr	r2, [pc, #268]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 80015da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015de:	6593      	str	r3, [r2, #88]	; 0x58
 80015e0:	4b41      	ldr	r3, [pc, #260]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 80015e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ec:	2301      	movs	r3, #1
 80015ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015f0:	4b3e      	ldr	r3, [pc, #248]	; (80016ec <HAL_RCC_OscConfig+0x57c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d118      	bne.n	800162e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015fc:	4b3b      	ldr	r3, [pc, #236]	; (80016ec <HAL_RCC_OscConfig+0x57c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a3a      	ldr	r2, [pc, #232]	; (80016ec <HAL_RCC_OscConfig+0x57c>)
 8001602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001606:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001608:	f7ff f94e 	bl	80008a8 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001610:	f7ff f94a 	bl	80008a8 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e1c1      	b.n	80019a6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001622:	4b32      	ldr	r3, [pc, #200]	; (80016ec <HAL_RCC_OscConfig+0x57c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0f0      	beq.n	8001610 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d108      	bne.n	8001648 <HAL_RCC_OscConfig+0x4d8>
 8001636:	4b2c      	ldr	r3, [pc, #176]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800163c:	4a2a      	ldr	r2, [pc, #168]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001646:	e024      	b.n	8001692 <HAL_RCC_OscConfig+0x522>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	2b05      	cmp	r3, #5
 800164e:	d110      	bne.n	8001672 <HAL_RCC_OscConfig+0x502>
 8001650:	4b25      	ldr	r3, [pc, #148]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001656:	4a24      	ldr	r2, [pc, #144]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001660:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001666:	4a20      	ldr	r2, [pc, #128]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001670:	e00f      	b.n	8001692 <HAL_RCC_OscConfig+0x522>
 8001672:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001678:	4a1b      	ldr	r2, [pc, #108]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 800167a:	f023 0301 	bic.w	r3, r3, #1
 800167e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 8001684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001688:	4a17      	ldr	r2, [pc, #92]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 800168a:	f023 0304 	bic.w	r3, r3, #4
 800168e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d016      	beq.n	80016c8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169a:	f7ff f905 	bl	80008a8 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016a0:	e00a      	b.n	80016b8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a2:	f7ff f901 	bl	80008a8 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e176      	b.n	80019a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_RCC_OscConfig+0x578>)
 80016ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0ed      	beq.n	80016a2 <HAL_RCC_OscConfig+0x532>
 80016c6:	e01a      	b.n	80016fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c8:	f7ff f8ee 	bl	80008a8 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016ce:	e00f      	b.n	80016f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d0:	f7ff f8ea 	bl	80008a8 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	; 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d906      	bls.n	80016f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e15f      	b.n	80019a6 <HAL_RCC_OscConfig+0x836>
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016f0:	4baa      	ldr	r3, [pc, #680]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 80016f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1e8      	bne.n	80016d0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016fe:	7ffb      	ldrb	r3, [r7, #31]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d105      	bne.n	8001710 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001704:	4ba5      	ldr	r3, [pc, #660]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 8001706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001708:	4aa4      	ldr	r2, [pc, #656]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 800170a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800170e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0320 	and.w	r3, r3, #32
 8001718:	2b00      	cmp	r3, #0
 800171a:	d03c      	beq.n	8001796 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	2b00      	cmp	r3, #0
 8001722:	d01c      	beq.n	800175e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001724:	4b9d      	ldr	r3, [pc, #628]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 8001726:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800172a:	4a9c      	ldr	r2, [pc, #624]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001734:	f7ff f8b8 	bl	80008a8 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800173c:	f7ff f8b4 	bl	80008a8 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e12b      	b.n	80019a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800174e:	4b93      	ldr	r3, [pc, #588]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 8001750:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0ef      	beq.n	800173c <HAL_RCC_OscConfig+0x5cc>
 800175c:	e01b      	b.n	8001796 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800175e:	4b8f      	ldr	r3, [pc, #572]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 8001760:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001764:	4a8d      	ldr	r2, [pc, #564]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 8001766:	f023 0301 	bic.w	r3, r3, #1
 800176a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176e:	f7ff f89b 	bl	80008a8 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001776:	f7ff f897 	bl	80008a8 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e10e      	b.n	80019a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001788:	4b84      	ldr	r3, [pc, #528]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 800178a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1ef      	bne.n	8001776 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 8102 	beq.w	80019a4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	f040 80c5 	bne.w	8001934 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017aa:	4b7c      	ldr	r3, [pc, #496]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f003 0203 	and.w	r2, r3, #3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d12c      	bne.n	8001818 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c8:	3b01      	subs	r3, #1
 80017ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d123      	bne.n	8001818 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017dc:	429a      	cmp	r2, r3
 80017de:	d11b      	bne.n	8001818 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d113      	bne.n	8001818 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017fa:	085b      	lsrs	r3, r3, #1
 80017fc:	3b01      	subs	r3, #1
 80017fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001800:	429a      	cmp	r2, r3
 8001802:	d109      	bne.n	8001818 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	085b      	lsrs	r3, r3, #1
 8001810:	3b01      	subs	r3, #1
 8001812:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001814:	429a      	cmp	r2, r3
 8001816:	d067      	beq.n	80018e8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	2b0c      	cmp	r3, #12
 800181c:	d062      	beq.n	80018e4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800181e:	4b5f      	ldr	r3, [pc, #380]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e0bb      	b.n	80019a6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800182e:	4b5b      	ldr	r3, [pc, #364]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a5a      	ldr	r2, [pc, #360]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 8001834:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001838:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800183a:	f7ff f835 	bl	80008a8 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001842:	f7ff f831 	bl	80008a8 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e0a8      	b.n	80019a6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001854:	4b51      	ldr	r3, [pc, #324]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f0      	bne.n	8001842 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001860:	4b4e      	ldr	r3, [pc, #312]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	4b4e      	ldr	r3, [pc, #312]	; (80019a0 <HAL_RCC_OscConfig+0x830>)
 8001866:	4013      	ands	r3, r2
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001870:	3a01      	subs	r2, #1
 8001872:	0112      	lsls	r2, r2, #4
 8001874:	4311      	orrs	r1, r2
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800187a:	0212      	lsls	r2, r2, #8
 800187c:	4311      	orrs	r1, r2
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001882:	0852      	lsrs	r2, r2, #1
 8001884:	3a01      	subs	r2, #1
 8001886:	0552      	lsls	r2, r2, #21
 8001888:	4311      	orrs	r1, r2
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800188e:	0852      	lsrs	r2, r2, #1
 8001890:	3a01      	subs	r2, #1
 8001892:	0652      	lsls	r2, r2, #25
 8001894:	4311      	orrs	r1, r2
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800189a:	06d2      	lsls	r2, r2, #27
 800189c:	430a      	orrs	r2, r1
 800189e:	493f      	ldr	r1, [pc, #252]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018a4:	4b3d      	ldr	r3, [pc, #244]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a3c      	ldr	r2, [pc, #240]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 80018aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018b0:	4b3a      	ldr	r3, [pc, #232]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	4a39      	ldr	r2, [pc, #228]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 80018b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018bc:	f7fe fff4 	bl	80008a8 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c4:	f7fe fff0 	bl	80008a8 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e067      	b.n	80019a6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d6:	4b31      	ldr	r3, [pc, #196]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018e2:	e05f      	b.n	80019a4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e05e      	b.n	80019a6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e8:	4b2c      	ldr	r3, [pc, #176]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d157      	bne.n	80019a4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018f4:	4b29      	ldr	r3, [pc, #164]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a28      	ldr	r2, [pc, #160]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 80018fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001900:	4b26      	ldr	r3, [pc, #152]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	4a25      	ldr	r2, [pc, #148]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 8001906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800190a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800190c:	f7fe ffcc 	bl	80008a8 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001914:	f7fe ffc8 	bl	80008a8 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e03f      	b.n	80019a6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001926:	4b1d      	ldr	r3, [pc, #116]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0x7a4>
 8001932:	e037      	b.n	80019a4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	2b0c      	cmp	r3, #12
 8001938:	d02d      	beq.n	8001996 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193a:	4b18      	ldr	r3, [pc, #96]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a17      	ldr	r2, [pc, #92]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 8001940:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001944:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d105      	bne.n	800195e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001952:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	4a11      	ldr	r2, [pc, #68]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 8001958:	f023 0303 	bic.w	r3, r3, #3
 800195c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800195e:	4b0f      	ldr	r3, [pc, #60]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	4a0e      	ldr	r2, [pc, #56]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 8001964:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001968:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800196c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196e:	f7fe ff9b 	bl	80008a8 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001976:	f7fe ff97 	bl	80008a8 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e00e      	b.n	80019a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <HAL_RCC_OscConfig+0x82c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1f0      	bne.n	8001976 <HAL_RCC_OscConfig+0x806>
 8001994:	e006      	b.n	80019a4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e005      	b.n	80019a6 <HAL_RCC_OscConfig+0x836>
 800199a:	bf00      	nop
 800199c:	40021000 	.word	0x40021000
 80019a0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3720      	adds	r7, #32
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop

080019b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0c8      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019c4:	4b66      	ldr	r3, [pc, #408]	; (8001b60 <HAL_RCC_ClockConfig+0x1b0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d910      	bls.n	80019f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b63      	ldr	r3, [pc, #396]	; (8001b60 <HAL_RCC_ClockConfig+0x1b0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 0207 	bic.w	r2, r3, #7
 80019da:	4961      	ldr	r1, [pc, #388]	; (8001b60 <HAL_RCC_ClockConfig+0x1b0>)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e2:	4b5f      	ldr	r3, [pc, #380]	; (8001b60 <HAL_RCC_ClockConfig+0x1b0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0b0      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d04c      	beq.n	8001a9a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b03      	cmp	r3, #3
 8001a06:	d107      	bne.n	8001a18 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a08:	4b56      	ldr	r3, [pc, #344]	; (8001b64 <HAL_RCC_ClockConfig+0x1b4>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d121      	bne.n	8001a58 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e09e      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d107      	bne.n	8001a30 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a20:	4b50      	ldr	r3, [pc, #320]	; (8001b64 <HAL_RCC_ClockConfig+0x1b4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d115      	bne.n	8001a58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e092      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d107      	bne.n	8001a48 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a38:	4b4a      	ldr	r3, [pc, #296]	; (8001b64 <HAL_RCC_ClockConfig+0x1b4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d109      	bne.n	8001a58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e086      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a48:	4b46      	ldr	r3, [pc, #280]	; (8001b64 <HAL_RCC_ClockConfig+0x1b4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e07e      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a58:	4b42      	ldr	r3, [pc, #264]	; (8001b64 <HAL_RCC_ClockConfig+0x1b4>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f023 0203 	bic.w	r2, r3, #3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	493f      	ldr	r1, [pc, #252]	; (8001b64 <HAL_RCC_ClockConfig+0x1b4>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a6a:	f7fe ff1d 	bl	80008a8 <HAL_GetTick>
 8001a6e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a70:	e00a      	b.n	8001a88 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a72:	f7fe ff19 	bl	80008a8 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e066      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a88:	4b36      	ldr	r3, [pc, #216]	; (8001b64 <HAL_RCC_ClockConfig+0x1b4>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 020c 	and.w	r2, r3, #12
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d1eb      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d008      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa6:	4b2f      	ldr	r3, [pc, #188]	; (8001b64 <HAL_RCC_ClockConfig+0x1b4>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	492c      	ldr	r1, [pc, #176]	; (8001b64 <HAL_RCC_ClockConfig+0x1b4>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab8:	4b29      	ldr	r3, [pc, #164]	; (8001b60 <HAL_RCC_ClockConfig+0x1b0>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d210      	bcs.n	8001ae8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac6:	4b26      	ldr	r3, [pc, #152]	; (8001b60 <HAL_RCC_ClockConfig+0x1b0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f023 0207 	bic.w	r2, r3, #7
 8001ace:	4924      	ldr	r1, [pc, #144]	; (8001b60 <HAL_RCC_ClockConfig+0x1b0>)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad6:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <HAL_RCC_ClockConfig+0x1b0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d001      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e036      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d008      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af4:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <HAL_RCC_ClockConfig+0x1b4>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	4918      	ldr	r1, [pc, #96]	; (8001b64 <HAL_RCC_ClockConfig+0x1b4>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d009      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b12:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <HAL_RCC_ClockConfig+0x1b4>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4910      	ldr	r1, [pc, #64]	; (8001b64 <HAL_RCC_ClockConfig+0x1b4>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b26:	f000 f825 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <HAL_RCC_ClockConfig+0x1b4>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	490c      	ldr	r1, [pc, #48]	; (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 8001b38:	5ccb      	ldrb	r3, [r1, r3]
 8001b3a:	f003 031f 	and.w	r3, r3, #31
 8001b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fe5c 	bl	8000808 <HAL_InitTick>
 8001b50:	4603      	mov	r3, r0
 8001b52:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b54:	7afb      	ldrb	r3, [r7, #11]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40022000 	.word	0x40022000
 8001b64:	40021000 	.word	0x40021000
 8001b68:	08001e14 	.word	0x08001e14
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	20000004 	.word	0x20000004

08001b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	; 0x24
 8001b78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b82:	4b3e      	ldr	r3, [pc, #248]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b8c:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x34>
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	2b0c      	cmp	r3, #12
 8001ba0:	d121      	bne.n	8001be6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d11e      	bne.n	8001be6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ba8:	4b34      	ldr	r3, [pc, #208]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0308 	and.w	r3, r3, #8
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d107      	bne.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bb4:	4b31      	ldr	r3, [pc, #196]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bba:	0a1b      	lsrs	r3, r3, #8
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	61fb      	str	r3, [r7, #28]
 8001bc2:	e005      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bc4:	4b2d      	ldr	r3, [pc, #180]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001bd0:	4a2b      	ldr	r2, [pc, #172]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10d      	bne.n	8001bfc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001be4:	e00a      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d102      	bne.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bec:	4b25      	ldr	r3, [pc, #148]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bee:	61bb      	str	r3, [r7, #24]
 8001bf0:	e004      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d101      	bne.n	8001bfc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bf8:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bfa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	2b0c      	cmp	r3, #12
 8001c00:	d134      	bne.n	8001c6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c02:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d003      	beq.n	8001c1a <HAL_RCC_GetSysClockFreq+0xa6>
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	d003      	beq.n	8001c20 <HAL_RCC_GetSysClockFreq+0xac>
 8001c18:	e005      	b.n	8001c26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c1c:	617b      	str	r3, [r7, #20]
      break;
 8001c1e:	e005      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c20:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c22:	617b      	str	r3, [r7, #20]
      break;
 8001c24:	e002      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	617b      	str	r3, [r7, #20]
      break;
 8001c2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	3301      	adds	r3, #1
 8001c38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	0a1b      	lsrs	r3, r3, #8
 8001c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	fb02 f203 	mul.w	r2, r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	0e5b      	lsrs	r3, r3, #25
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c6c:	69bb      	ldr	r3, [r7, #24]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3724      	adds	r7, #36	; 0x24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	08001e24 	.word	0x08001e24
 8001c84:	00f42400 	.word	0x00f42400
 8001c88:	007a1200 	.word	0x007a1200

08001c8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c94:	2300      	movs	r3, #0
 8001c96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c98:	4b2a      	ldr	r3, [pc, #168]	; (8001d44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ca4:	f7ff f968 	bl	8000f78 <HAL_PWREx_GetVoltageRange>
 8001ca8:	6178      	str	r0, [r7, #20]
 8001caa:	e014      	b.n	8001cd6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cac:	4b25      	ldr	r3, [pc, #148]	; (8001d44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb0:	4a24      	ldr	r2, [pc, #144]	; (8001d44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	6593      	str	r3, [r2, #88]	; 0x58
 8001cb8:	4b22      	ldr	r3, [pc, #136]	; (8001d44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001cc4:	f7ff f958 	bl	8000f78 <HAL_PWREx_GetVoltageRange>
 8001cc8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cca:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cce:	4a1d      	ldr	r2, [pc, #116]	; (8001d44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cdc:	d10b      	bne.n	8001cf6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b80      	cmp	r3, #128	; 0x80
 8001ce2:	d919      	bls.n	8001d18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2ba0      	cmp	r3, #160	; 0xa0
 8001ce8:	d902      	bls.n	8001cf0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cea:	2302      	movs	r3, #2
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	e013      	b.n	8001d18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	e010      	b.n	8001d18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b80      	cmp	r3, #128	; 0x80
 8001cfa:	d902      	bls.n	8001d02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	e00a      	b.n	8001d18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b80      	cmp	r3, #128	; 0x80
 8001d06:	d102      	bne.n	8001d0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d08:	2302      	movs	r3, #2
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	e004      	b.n	8001d18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b70      	cmp	r3, #112	; 0x70
 8001d12:	d101      	bne.n	8001d18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d14:	2301      	movs	r3, #1
 8001d16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f023 0207 	bic.w	r2, r3, #7
 8001d20:	4909      	ldr	r1, [pc, #36]	; (8001d48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d28:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d001      	beq.n	8001d3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40022000 	.word	0x40022000

08001d4c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001d56:	f043 0304 	orr.w	r3, r3, #4
 8001d5a:	6013      	str	r3, [r2, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40021000 	.word	0x40021000

08001d6c <__libc_init_array>:
 8001d6c:	b570      	push	{r4, r5, r6, lr}
 8001d6e:	4d0d      	ldr	r5, [pc, #52]	; (8001da4 <__libc_init_array+0x38>)
 8001d70:	4c0d      	ldr	r4, [pc, #52]	; (8001da8 <__libc_init_array+0x3c>)
 8001d72:	1b64      	subs	r4, r4, r5
 8001d74:	10a4      	asrs	r4, r4, #2
 8001d76:	2600      	movs	r6, #0
 8001d78:	42a6      	cmp	r6, r4
 8001d7a:	d109      	bne.n	8001d90 <__libc_init_array+0x24>
 8001d7c:	4d0b      	ldr	r5, [pc, #44]	; (8001dac <__libc_init_array+0x40>)
 8001d7e:	4c0c      	ldr	r4, [pc, #48]	; (8001db0 <__libc_init_array+0x44>)
 8001d80:	f000 f83c 	bl	8001dfc <_init>
 8001d84:	1b64      	subs	r4, r4, r5
 8001d86:	10a4      	asrs	r4, r4, #2
 8001d88:	2600      	movs	r6, #0
 8001d8a:	42a6      	cmp	r6, r4
 8001d8c:	d105      	bne.n	8001d9a <__libc_init_array+0x2e>
 8001d8e:	bd70      	pop	{r4, r5, r6, pc}
 8001d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d94:	4798      	blx	r3
 8001d96:	3601      	adds	r6, #1
 8001d98:	e7ee      	b.n	8001d78 <__libc_init_array+0xc>
 8001d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d9e:	4798      	blx	r3
 8001da0:	3601      	adds	r6, #1
 8001da2:	e7f2      	b.n	8001d8a <__libc_init_array+0x1e>
 8001da4:	08001e54 	.word	0x08001e54
 8001da8:	08001e54 	.word	0x08001e54
 8001dac:	08001e54 	.word	0x08001e54
 8001db0:	08001e58 	.word	0x08001e58

08001db4 <memcmp>:
 8001db4:	b530      	push	{r4, r5, lr}
 8001db6:	3901      	subs	r1, #1
 8001db8:	2400      	movs	r4, #0
 8001dba:	42a2      	cmp	r2, r4
 8001dbc:	d101      	bne.n	8001dc2 <memcmp+0xe>
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	e005      	b.n	8001dce <memcmp+0x1a>
 8001dc2:	5d03      	ldrb	r3, [r0, r4]
 8001dc4:	3401      	adds	r4, #1
 8001dc6:	5d0d      	ldrb	r5, [r1, r4]
 8001dc8:	42ab      	cmp	r3, r5
 8001dca:	d0f6      	beq.n	8001dba <memcmp+0x6>
 8001dcc:	1b58      	subs	r0, r3, r5
 8001dce:	bd30      	pop	{r4, r5, pc}

08001dd0 <memcpy>:
 8001dd0:	440a      	add	r2, r1
 8001dd2:	4291      	cmp	r1, r2
 8001dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8001dd8:	d100      	bne.n	8001ddc <memcpy+0xc>
 8001dda:	4770      	bx	lr
 8001ddc:	b510      	push	{r4, lr}
 8001dde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001de2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001de6:	4291      	cmp	r1, r2
 8001de8:	d1f9      	bne.n	8001dde <memcpy+0xe>
 8001dea:	bd10      	pop	{r4, pc}

08001dec <memset>:
 8001dec:	4402      	add	r2, r0
 8001dee:	4603      	mov	r3, r0
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d100      	bne.n	8001df6 <memset+0xa>
 8001df4:	4770      	bx	lr
 8001df6:	f803 1b01 	strb.w	r1, [r3], #1
 8001dfa:	e7f9      	b.n	8001df0 <memset+0x4>

08001dfc <_init>:
 8001dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dfe:	bf00      	nop
 8001e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e02:	bc08      	pop	{r3}
 8001e04:	469e      	mov	lr, r3
 8001e06:	4770      	bx	lr

08001e08 <_fini>:
 8001e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e0a:	bf00      	nop
 8001e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e0e:	bc08      	pop	{r3}
 8001e10:	469e      	mov	lr, r3
 8001e12:	4770      	bx	lr
