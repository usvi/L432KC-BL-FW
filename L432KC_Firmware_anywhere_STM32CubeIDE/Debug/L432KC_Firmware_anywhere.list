
L432KC_Firmware_anywhere.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  20000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .got          00000020  2000018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         00002080  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000040  0800222c  0800222c  0001222c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800226c  0800226c  000201c4  2**0
                  CONTENTS
  5 .ARM          00000000  0800226c  0800226c  000201c4  2**0
                  CONTENTS
  6 .preinit_array 00000000  0800226c  0800226c  000201c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800226c  0800226c  0001226c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08002270  08002270  00012270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000000c  200001ac  08002274  000201ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .got.plt      0000000c  200001b8  08002280  000201b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000007c  200001c4  0800228c  000201c4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000240  0800228c  00020240  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000cec4  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001c03  00000000  00000000  0002d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c60  00000000  00000000  0002ecc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f8da  00000000  00000000  0002f920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ceea  00000000  00000000  0004f1fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c243d  00000000  00000000  0005c0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011e521  2**0
                  CONTENTS, READONLY
 21 .debug_ranges 00000b70  00000000  00000000  0011e578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00003230  00000000  00000000  0011f0e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200001c4 	.word	0x200001c4
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002214 	.word	0x08002214

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200001c8 	.word	0x200001c8
 80001e8:	08002214 	.word	0x08002214

080001ec <main>:
 *
 * -mno-pic-data-is-text-relative
 * -mpic-register=r9
 */
int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
  HAL_Init();
 80001f0:	f000 fae9 	bl	80007c6 <HAL_Init>
  SystemClock_Config();
 80001f4:	f000 f812 	bl	800021c <SystemClock_Config>
  MX_GPIO_Init();
 80001f8:	f000 f8e0 	bl	80003bc <MX_GPIO_Init>
  MX_TIM7_DeInit(); // Without this fails at times
 80001fc:	f000 f8bc 	bl	8000378 <MX_TIM7_DeInit>
  MX_TIM7_Init();
 8000200:	f000 f86e 	bl	80002e0 <MX_TIM7_Init>
  HAL_TIM_Base_Start_IT(&gtHtim7);
 8000204:	4b04      	ldr	r3, [pc, #16]	; (8000218 <main+0x2c>)
 8000206:	f859 3003 	ldr.w	r3, [r9, r3]
 800020a:	4618      	mov	r0, r3
 800020c:	f001 fd76 	bl	8001cfc <HAL_TIM_Base_Start_IT>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000210:	b662      	cpsie	i
}
 8000212:	bf00      	nop
  __enable_irq();

  while (1)
 8000214:	e7fe      	b.n	8000214 <main+0x28>
 8000216:	bf00      	nop
 8000218:	00000000 	.word	0x00000000

0800021c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b096      	sub	sp, #88	; 0x58
 8000220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000222:	f107 0314 	add.w	r3, r7, #20
 8000226:	2244      	movs	r2, #68	; 0x44
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f001 ffea 	bl	8002204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000230:	463b      	mov	r3, r7
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
 8000236:	605a      	str	r2, [r3, #4]
 8000238:	609a      	str	r2, [r3, #8]
 800023a:	60da      	str	r2, [r3, #12]
 800023c:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800023e:	f000 fe27 	bl	8000e90 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000242:	4b26      	ldr	r3, [pc, #152]	; (80002dc <SystemClock_Config+0xc0>)
 8000244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000248:	4a24      	ldr	r2, [pc, #144]	; (80002dc <SystemClock_Config+0xc0>)
 800024a:	f023 0318 	bic.w	r3, r3, #24
 800024e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000252:	2314      	movs	r3, #20
 8000254:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000256:	2301      	movs	r3, #1
 8000258:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800025a:	2301      	movs	r3, #1
 800025c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800025e:	2300      	movs	r3, #0
 8000260:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000262:	2360      	movs	r3, #96	; 0x60
 8000264:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000266:	2302      	movs	r3, #2
 8000268:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800026a:	2301      	movs	r3, #1
 800026c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800026e:	2301      	movs	r3, #1
 8000270:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000272:	2310      	movs	r3, #16
 8000274:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000276:	2307      	movs	r3, #7
 8000278:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800027a:	2302      	movs	r3, #2
 800027c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800027e:	2302      	movs	r3, #2
 8000280:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000282:	f107 0314 	add.w	r3, r7, #20
 8000286:	4618      	mov	r0, r3
 8000288:	f000 fe78 	bl	8000f7c <HAL_RCC_OscConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000292:	f000 f8dd 	bl	8000450 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000296:	230f      	movs	r3, #15
 8000298:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029a:	2303      	movs	r3, #3
 800029c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002aa:	463b      	mov	r3, r7
 80002ac:	2101      	movs	r1, #1
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 fa8a 	bl	80017c8 <HAL_RCC_ClockConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80002ba:	f000 f8c9 	bl	8000450 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002c2:	f000 fe03 	bl	8000ecc <HAL_PWREx_ControlVoltageScaling>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002cc:	f000 f8c0 	bl	8000450 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80002d0:	f001 fc50 	bl	8001b74 <HAL_RCCEx_EnableMSIPLLMode>
}
 80002d4:	bf00      	nop
 80002d6:	3758      	adds	r7, #88	; 0x58
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	40021000 	.word	0x40021000

080002e0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]

  gtHtim7.Instance = TIM7;
 80002f0:	4b20      	ldr	r3, [pc, #128]	; (8000374 <MX_TIM7_Init+0x94>)
 80002f2:	f859 3003 	ldr.w	r3, [r9, r3]
 80002f6:	461a      	mov	r2, r3
 80002f8:	4b1d      	ldr	r3, [pc, #116]	; (8000370 <MX_TIM7_Init+0x90>)
 80002fa:	6013      	str	r3, [r2, #0]
  gtHtim7.Init.Prescaler = 32000 - 1;
 80002fc:	4b1d      	ldr	r3, [pc, #116]	; (8000374 <MX_TIM7_Init+0x94>)
 80002fe:	f859 3003 	ldr.w	r3, [r9, r3]
 8000302:	461a      	mov	r2, r3
 8000304:	f647 43ff 	movw	r3, #31999	; 0x7cff
 8000308:	6053      	str	r3, [r2, #4]
  gtHtim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800030a:	4b1a      	ldr	r3, [pc, #104]	; (8000374 <MX_TIM7_Init+0x94>)
 800030c:	f859 3003 	ldr.w	r3, [r9, r3]
 8000310:	461a      	mov	r2, r3
 8000312:	2300      	movs	r3, #0
 8000314:	6093      	str	r3, [r2, #8]
  gtHtim7.Init.Period = 1000;
 8000316:	4b17      	ldr	r3, [pc, #92]	; (8000374 <MX_TIM7_Init+0x94>)
 8000318:	f859 3003 	ldr.w	r3, [r9, r3]
 800031c:	461a      	mov	r2, r3
 800031e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000322:	60d3      	str	r3, [r2, #12]
  gtHtim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000324:	4b13      	ldr	r3, [pc, #76]	; (8000374 <MX_TIM7_Init+0x94>)
 8000326:	f859 3003 	ldr.w	r3, [r9, r3]
 800032a:	461a      	mov	r2, r3
 800032c:	2300      	movs	r3, #0
 800032e:	6193      	str	r3, [r2, #24]

  if (HAL_TIM_Base_Init(&gtHtim7) != HAL_OK)
 8000330:	4b10      	ldr	r3, [pc, #64]	; (8000374 <MX_TIM7_Init+0x94>)
 8000332:	f859 3003 	ldr.w	r3, [r9, r3]
 8000336:	4618      	mov	r0, r3
 8000338:	f001 fc2c 	bl	8001b94 <HAL_TIM_Base_Init>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_TIM7_Init+0x66>
  {
    Error_Handler();
 8000342:	f000 f885 	bl	8000450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000346:	2300      	movs	r3, #0
 8000348:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800034a:	2300      	movs	r3, #0
 800034c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&gtHtim7, &sMasterConfig) != HAL_OK)
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	4619      	mov	r1, r3
 8000352:	4b08      	ldr	r3, [pc, #32]	; (8000374 <MX_TIM7_Init+0x94>)
 8000354:	f859 3003 	ldr.w	r3, [r9, r3]
 8000358:	4618      	mov	r0, r3
 800035a:	f001 fecf 	bl	80020fc <HAL_TIMEx_MasterConfigSynchronization>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_TIM7_Init+0x88>
  {
    Error_Handler();
 8000364:	f000 f874 	bl	8000450 <Error_Handler>
  }
}
 8000368:	bf00      	nop
 800036a:	3710      	adds	r7, #16
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	40001400 	.word	0x40001400
 8000374:	00000000 	.word	0x00000000

08000378 <MX_TIM7_DeInit>:


static void MX_TIM7_DeInit(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  HAL_TIM_Base_DeInit(&gtHtim7);
 800037c:	4b03      	ldr	r3, [pc, #12]	; (800038c <MX_TIM7_DeInit+0x14>)
 800037e:	f859 3003 	ldr.w	r3, [r9, r3]
 8000382:	4618      	mov	r0, r3
 8000384:	f001 fc5d 	bl	8001c42 <HAL_TIM_Base_DeInit>
}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}
 800038c:	00000000 	.word	0x00000000

08000390 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  if (htim == &gtHtim7)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4a07      	ldr	r2, [pc, #28]	; (80003b8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800039c:	f859 2002 	ldr.w	r2, [r9, r2]
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d103      	bne.n	80003ac <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80003a4:	2108      	movs	r1, #8
 80003a6:	4803      	ldr	r0, [pc, #12]	; (80003b4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80003a8:	f000 fd58 	bl	8000e5c <HAL_GPIO_TogglePin>
  }

}
 80003ac:	bf00      	nop
 80003ae:	3708      	adds	r7, #8
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	48000400 	.word	0x48000400
 80003b8:	00000000 	.word	0x00000000

080003bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b088      	sub	sp, #32
 80003c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c2:	f107 030c 	add.w	r3, r7, #12
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]
 80003d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d2:	4b1d      	ldr	r3, [pc, #116]	; (8000448 <MX_GPIO_Init+0x8c>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	4a1c      	ldr	r2, [pc, #112]	; (8000448 <MX_GPIO_Init+0x8c>)
 80003d8:	f043 0304 	orr.w	r3, r3, #4
 80003dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003de:	4b1a      	ldr	r3, [pc, #104]	; (8000448 <MX_GPIO_Init+0x8c>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e2:	f003 0304 	and.w	r3, r3, #4
 80003e6:	60bb      	str	r3, [r7, #8]
 80003e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ea:	4b17      	ldr	r3, [pc, #92]	; (8000448 <MX_GPIO_Init+0x8c>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ee:	4a16      	ldr	r2, [pc, #88]	; (8000448 <MX_GPIO_Init+0x8c>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f6:	4b14      	ldr	r3, [pc, #80]	; (8000448 <MX_GPIO_Init+0x8c>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000402:	4b11      	ldr	r3, [pc, #68]	; (8000448 <MX_GPIO_Init+0x8c>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000406:	4a10      	ldr	r2, [pc, #64]	; (8000448 <MX_GPIO_Init+0x8c>)
 8000408:	f043 0302 	orr.w	r3, r3, #2
 800040c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800040e:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <MX_GPIO_Init+0x8c>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000412:	f003 0302 	and.w	r3, r3, #2
 8000416:	603b      	str	r3, [r7, #0]
 8000418:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2108      	movs	r1, #8
 800041e:	480b      	ldr	r0, [pc, #44]	; (800044c <MX_GPIO_Init+0x90>)
 8000420:	f000 fd04 	bl	8000e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000424:	2308      	movs	r3, #8
 8000426:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000428:	2301      	movs	r3, #1
 800042a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042c:	2300      	movs	r3, #0
 800042e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000430:	2300      	movs	r3, #0
 8000432:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000434:	f107 030c 	add.w	r3, r7, #12
 8000438:	4619      	mov	r1, r3
 800043a:	4804      	ldr	r0, [pc, #16]	; (800044c <MX_GPIO_Init+0x90>)
 800043c:	f000 fb8c 	bl	8000b58 <HAL_GPIO_Init>

}
 8000440:	bf00      	nop
 8000442:	3720      	adds	r7, #32
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40021000 	.word	0x40021000
 800044c:	48000400 	.word	0x48000400

08000450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000454:	b672      	cpsid	i
}
 8000456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000458:	e7fe      	b.n	8000458 <Error_Handler+0x8>
	...

0800045c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000462:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <HAL_MspInit+0x44>)
 8000464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000466:	4a0e      	ldr	r2, [pc, #56]	; (80004a0 <HAL_MspInit+0x44>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	6613      	str	r3, [r2, #96]	; 0x60
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <HAL_MspInit+0x44>)
 8000470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047a:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <HAL_MspInit+0x44>)
 800047c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800047e:	4a08      	ldr	r2, [pc, #32]	; (80004a0 <HAL_MspInit+0x44>)
 8000480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000484:	6593      	str	r3, [r2, #88]	; 0x58
 8000486:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <HAL_MspInit+0x44>)
 8000488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800048a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800048e:	603b      	str	r3, [r7, #0]
 8000490:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000

080004a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a0d      	ldr	r2, [pc, #52]	; (80004e8 <HAL_TIM_Base_MspInit+0x44>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d113      	bne.n	80004de <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80004b6:	4b0d      	ldr	r3, [pc, #52]	; (80004ec <HAL_TIM_Base_MspInit+0x48>)
 80004b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ba:	4a0c      	ldr	r2, [pc, #48]	; (80004ec <HAL_TIM_Base_MspInit+0x48>)
 80004bc:	f043 0320 	orr.w	r3, r3, #32
 80004c0:	6593      	str	r3, [r2, #88]	; 0x58
 80004c2:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <HAL_TIM_Base_MspInit+0x48>)
 80004c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004c6:	f003 0320 	and.w	r3, r3, #32
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80004ce:	2200      	movs	r2, #0
 80004d0:	2100      	movs	r1, #0
 80004d2:	2037      	movs	r0, #55	; 0x37
 80004d4:	f000 fafb 	bl	8000ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80004d8:	2037      	movs	r0, #55	; 0x37
 80004da:	f000 fb14 	bl	8000b06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80004de:	bf00      	nop
 80004e0:	3710      	adds	r7, #16
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40001400 	.word	0x40001400
 80004ec:	40021000 	.word	0x40021000

080004f0 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a07      	ldr	r2, [pc, #28]	; (800051c <HAL_TIM_Base_MspDeInit+0x2c>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d108      	bne.n	8000514 <HAL_TIM_Base_MspDeInit+0x24>
  {
    /* Peripheral clock disable */
    __HAL_RCC_TIM7_CLK_DISABLE();
 8000502:	4b07      	ldr	r3, [pc, #28]	; (8000520 <HAL_TIM_Base_MspDeInit+0x30>)
 8000504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000506:	4a06      	ldr	r2, [pc, #24]	; (8000520 <HAL_TIM_Base_MspDeInit+0x30>)
 8000508:	f023 0320 	bic.w	r3, r3, #32
 800050c:	6593      	str	r3, [r2, #88]	; 0x58

    /* TIM7 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM7_IRQn);
 800050e:	2037      	movs	r0, #55	; 0x37
 8000510:	f000 fb07 	bl	8000b22 <HAL_NVIC_DisableIRQ>
  }

}
 8000514:	bf00      	nop
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40001400 	.word	0x40001400
 8000520:	40021000 	.word	0x40021000

08000524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <NMI_Handler+0x4>
	...

0800052c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  uint32_t u32Cfsr = *((uint32_t*)0xE000ED28);
 8000532:	4b03      	ldr	r3, [pc, #12]	; (8000540 <HardFault_Handler+0x14>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	607b      	str	r3, [r7, #4]
  u32Cfsr += 0; // To stop compile nags

  uint32_t u32Bfar = *((uint32_t*)0xE000ED38);
 8000538:	4b02      	ldr	r3, [pc, #8]	; (8000544 <HardFault_Handler+0x18>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	603b      	str	r3, [r7, #0]
  u32Bfar += 0;

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800053e:	e7fe      	b.n	800053e <HardFault_Handler+0x12>
 8000540:	e000ed28 	.word	0xe000ed28
 8000544:	e000ed38 	.word	0xe000ed38

08000548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800054c:	e7fe      	b.n	800054c <MemManage_Handler+0x4>

0800054e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000552:	e7fe      	b.n	8000552 <BusFault_Handler+0x4>

08000554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <UsageFault_Handler+0x4>

0800055a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800055e:	bf00      	nop
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr

08000568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000588:	f000 f97a 	bl	8000880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}

08000590 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&gtHtim7);
 8000594:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <TIM7_IRQHandler+0x14>)
 8000596:	f859 3003 	ldr.w	r3, [r9, r3]
 800059a:	4618      	mov	r0, r3
 800059c:	f001 fc02 	bl	8001da4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	00000000 	.word	0x00000000

080005a8 <SystemInit>:
  */

extern uint32_t gu32FirmwareAbsPosition;

void SystemInit(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80005ac:	f3bf 8f5f 	dmb	sy
}
 80005b0:	bf00      	nop
  __DMB();
  SCB->VTOR = gu32RamVectorTableBegin;
 80005b2:	4a1a      	ldr	r2, [pc, #104]	; (800061c <SystemInit+0x74>)
 80005b4:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <SystemInit+0x7c>)
 80005b6:	f859 3003 	ldr.w	r3, [r9, r3]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 80005be:	f3bf 8f5f 	dmb	sy
}
 80005c2:	bf00      	nop
  __DMB();

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <SystemInit+0x74>)
 80005c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ca:	4a14      	ldr	r2, [pc, #80]	; (800061c <SystemInit+0x74>)
 80005cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <SystemInit+0x78>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a11      	ldr	r2, [pc, #68]	; (8000620 <SystemInit+0x78>)
 80005da:	f043 0301 	orr.w	r3, r3, #1
 80005de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80005e0:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <SystemInit+0x78>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <SystemInit+0x78>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a0d      	ldr	r2, [pc, #52]	; (8000620 <SystemInit+0x78>)
 80005ec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80005f0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80005f4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <SystemInit+0x78>)
 80005f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005fc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <SystemInit+0x78>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a07      	ldr	r2, [pc, #28]	; (8000620 <SystemInit+0x78>)
 8000604:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000608:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <SystemInit+0x78>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	e000ed00 	.word	0xe000ed00
 8000620:	40021000 	.word	0x40021000
 8000624:	0000001c 	.word	0x0000001c

08000628 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000628:	f8df d13c 	ldr.w	sp, [pc, #316]	; 8000768 <LoopForever+0x4>




  // Store r10 passed by bootloader as gu32FirmwareAbsPosition, need to use hoop if Cortex-M0
  mov r7, r10
 800062c:	4657      	mov	r7, sl
  ldr r2, =gu32FirmwareAbsPosition
 800062e:	4a4f      	ldr	r2, [pc, #316]	; (800076c <LoopForever+0x8>)
  str r7, [r2]
 8000630:	6017      	str	r7, [r2, #0]

  // Store r11 passed by bootloader as gu32FirmwareOffset, need to use hoop if Cortex-M0
  mov r7, r11
 8000632:	465f      	mov	r7, fp
  ldr r2, =gu32FirmwareOffset
 8000634:	4a4e      	ldr	r2, [pc, #312]	; (8000770 <LoopForever+0xc>)
  str r7, [r2]
 8000636:	6017      	str	r7, [r2, #0]

  // Store r12 passed by bootloader as gu32FirmwareAbsOffsetChecksum, need to use hoop if Cortex-M0
  mov r7, r12
 8000638:	4667      	mov	r7, ip
  ldr r2, =gu32FirmwareAbsOffsetChecksum
 800063a:	4a4e      	ldr	r2, [pc, #312]	; (8000774 <LoopForever+0x10>)
  str r7, [r2]
 800063c:	6017      	str	r7, [r2, #0]

  // Store vector table RAM being address dynamically so systemconfig can map it
  ldr r7, =__ram_vector_table_begin
 800063e:	4f4e      	ldr	r7, [pc, #312]	; (8000778 <LoopForever+0x14>)
  ldr r2, =gu32RamVectorTableBegin
 8000640:	4a4e      	ldr	r2, [pc, #312]	; (800077c <LoopForever+0x18>)
  str r7, [r2]
 8000642:	6017      	str	r7, [r2, #0]

  // Firmware may be booting as standalone. In that case inspect the checksum
  // and if it does not match, we are most likely running from standalone.
  // Funny thing, Cortex-M0 reset values seem to be like 0xffffffff? Well,
  // checksum in anycase takes care of that correct values are loaded.
  ldr r2, =gu32FirmwareAbsPosition // Load variable address
 8000644:	4a49      	ldr	r2, [pc, #292]	; (800076c <LoopForever+0x8>)
  ldr r2, [r2] // Load variable data
 8000646:	6812      	ldr	r2, [r2, #0]
  ldr r3, =gu32FirmwareOffset // Load variable address
 8000648:	4b49      	ldr	r3, [pc, #292]	; (8000770 <LoopForever+0xc>)
  ldr r3, [r3] // Load variable data
 800064a:	681b      	ldr	r3, [r3, #0]
  ldr r4, =gu32FirmwareAbsOffsetChecksum // Load variable address
 800064c:	4c49      	ldr	r4, [pc, #292]	; (8000774 <LoopForever+0x10>)
  ldr r4, [r4] // Load variable data
 800064e:	6824      	ldr	r4, [r4, #0]
  movs r1, r2// Calculating the checksum into r1
 8000650:	0011      	movs	r1, r2
  eors r1, r1, r3 // r2/gu32FirmwareAbsPosition already there, need only r3/gu32FirmwareOffset
 8000652:	4059      	eors	r1, r3
  cmp r1, r4 // Actual compare
 8000654:	42a1      	cmp	r1, r4
  beq BootloadedBootContinue // If match, just do nothing
 8000656:	d005      	beq.n	8000664 <BootloadedBootContinue>
  // Did not match, so we need to store correct values of gu32FirmwareAbsPosition and gu32FirmwareOffset
  ldr r1, =__flash_begin; // Load variable address
 8000658:	4949      	ldr	r1, [pc, #292]	; (8000780 <LoopForever+0x1c>)
  ldr r2, =gu32FirmwareAbsPosition // Load variable address
 800065a:	4a44      	ldr	r2, [pc, #272]	; (800076c <LoopForever+0x8>)
  str r1, [r2] // Finally store the new value to ram
 800065c:	6011      	str	r1, [r2, #0]
  movs r1, #0 // Put zero offset
 800065e:	2100      	movs	r1, #0
  ldr r2, =gu32FirmwareOffset // Load firmware offset variable address
 8000660:	4a43      	ldr	r2, [pc, #268]	; (8000770 <LoopForever+0xc>)
  str r1, [r2] // Store zero offset
 8000662:	6011      	str	r1, [r2, #0]

08000664 <BootloadedBootContinue>:
BootloadedBootContinue:


  // GOT needs to be in RAM in every case
GlobalOffsetTableCopyPatchInit:
  movs r0, #0 // Loop variable
 8000664:	2000      	movs	r0, #0
  movs r1, #0 // Pointer (just introduction)
 8000666:	2100      	movs	r1, #0

08000668 <GlobalOffsetTableCopyPatchLoopCond>:

GlobalOffsetTableCopyPatchLoopCond:
  ldr r2, =__flash_global_offset_table_begin // Need global offset table table beginning for pointer
 8000668:	4a46      	ldr	r2, [pc, #280]	; (8000784 <LoopForever+0x20>)
  ldr r3, =__flash_global_offset_table_end // And need end for checking loop
 800066a:	4b47      	ldr	r3, [pc, #284]	; (8000788 <LoopForever+0x24>)
  ldr r4, =gu32FirmwareOffset // Need also data offset variable address
 800066c:	4c40      	ldr	r4, [pc, #256]	; (8000770 <LoopForever+0xc>)
  ldr r4, [r4] // And the actual offset value
 800066e:	6824      	ldr	r4, [r4, #0]
  adds r2, r2, r4 // Patching flash global offset table begin to honour offset
 8000670:	1912      	adds	r2, r2, r4
  adds r3, r3, r4 // Patching flash global offset table end to honour offset
 8000672:	191b      	adds	r3, r3, r4
  adds r1, r0, r2 // Pointer value is loop variable + offsetted flash global offset table begin
 8000674:	1881      	adds	r1, r0, r2
  cmp r1, r3 // Compare pointer against global offset table flash end
 8000676:	4299      	cmp	r1, r3
  bhs GlobalOffsetTableCopyPatchEnd // If getting past limits, go to end
 8000678:	d20e      	bcs.n	8000698 <GlobalOffsetTableCopyPatchEnd>

0800067a <GlobalOffsetTableCopyPatchLoopBody>:

GlobalOffsetTableCopyPatchLoopBody:
  ldr r2, [r1] // Load the actual data via pointer
 800067a:	680a      	ldr	r2, [r1, #0]
  ldr r3, =__flash_begin // Need flash begin boundary for checking
 800067c:	4b40      	ldr	r3, [pc, #256]	; (8000780 <LoopForever+0x1c>)
  ldr r4, =__flash_end // Need also flash end boundary for checking
 800067e:	4c43      	ldr	r4, [pc, #268]	; (800078c <LoopForever+0x28>)
  cmp r2, r3 // Comparing loaded data to flash begin
 8000680:	429a      	cmp	r2, r3
  blo GlobalOffsetTableStoreData // If less than flash begin, jump to store
 8000682:	d304      	bcc.n	800068e <GlobalOffsetTableStoreData>
  cmp r2, r4 // Comparing loaded data to flash end
 8000684:	42a2      	cmp	r2, r4
  bhs GlobalOffsetTableStoreData // If more than or equal to end, jump to store
 8000686:	d202      	bcs.n	800068e <GlobalOffsetTableStoreData>

08000688 <GlobalOffsetTablePatchData>:

GlobalOffsetTablePatchData:
  ldr r3, =gu32FirmwareOffset // Need data offset variable address
 8000688:	4b39      	ldr	r3, [pc, #228]	; (8000770 <LoopForever+0xc>)
  ldr r3, [r3] // And then the actual data
 800068a:	681b      	ldr	r3, [r3, #0]
  adds r2, r2, r3 // Patch the data
 800068c:	18d2      	adds	r2, r2, r3

0800068e <GlobalOffsetTableStoreData>:

GlobalOffsetTableStoreData:
  ldr r3, =__ram_global_offset_table_begin // Get global offset table begin in ram for ram data pointer
 800068e:	4b40      	ldr	r3, [pc, #256]	; (8000790 <LoopForever+0x2c>)
  adds r3, r3, r0 // Add loop variable
 8000690:	181b      	adds	r3, r3, r0
  str r2, [r3] // Store the data
 8000692:	601a      	str	r2, [r3, #0]

08000694 <GlobalOffsetTableLoopIncrements>:

GlobalOffsetTableLoopIncrements:
  adds r0, r0, #4 // Increment loop
 8000694:	3004      	adds	r0, #4
  b GlobalOffsetTableCopyPatchLoopCond // Jump to loop condition checking
 8000696:	e7e7      	b.n	8000668 <GlobalOffsetTableCopyPatchLoopCond>

08000698 <GlobalOffsetTableCopyPatchEnd>:

GlobalOffsetTableCopyPatchEnd:
  ldr r0, =__ram_global_offset_table_begin
 8000698:	483d      	ldr	r0, [pc, #244]	; (8000790 <LoopForever+0x2c>)
  mov r9, r0 // Stupid trick to put global offset table location to r9, for Cortex-M0
 800069a:	4681      	mov	r9, r0

0800069c <VectorTableCopyPatchInit>:



  // Need to copy and patch vector table in assembly so nobody comes to mess around
VectorTableCopyPatchInit:
  movs r0, #0 // Loop variable
 800069c:	2000      	movs	r0, #0
  movs r1, #0 // Pointer (just introduction)
 800069e:	2100      	movs	r1, #0

080006a0 <VectorTableCopyPatchLoopCond>:

VectorTableCopyPatchLoopCond:
  ldr r2, =__flash_vector_table_begin // Need vector table beginning for pointer
 80006a0:	4a3c      	ldr	r2, [pc, #240]	; (8000794 <LoopForever+0x30>)
  ldr r3, =__flash_vector_table_end // And need end for checking loop
 80006a2:	4b3d      	ldr	r3, [pc, #244]	; (8000798 <LoopForever+0x34>)
  ldr r4, =gu32FirmwareOffset // Need also data offset variable address
 80006a4:	4c32      	ldr	r4, [pc, #200]	; (8000770 <LoopForever+0xc>)
  ldr r4, [r4] // And the actual offset value
 80006a6:	6824      	ldr	r4, [r4, #0]
  adds r2, r2, r4 // Patching flash vector table begin to honour offset
 80006a8:	1912      	adds	r2, r2, r4
  adds r3, r3, r4 // Patching flash vector table end to honour offset
 80006aa:	191b      	adds	r3, r3, r4
  adds r1, r0, r2 // Pointer value is loop variable + offsetted flash vector table begin
 80006ac:	1881      	adds	r1, r0, r2
  cmp r1, r3 // Compare pointer against vector table flash end
 80006ae:	4299      	cmp	r1, r3
  bhs VectorTableCopyPatchEnd // If getting past limits, go to end
 80006b0:	d20e      	bcs.n	80006d0 <VectorTableCopyPatchEnd>

080006b2 <VectorTableCopyPatchLoopBody>:

VectorTableCopyPatchLoopBody:
  ldr r2, [r1] // Load the actual data via pointer
 80006b2:	680a      	ldr	r2, [r1, #0]
  ldr r3, =__flash_begin // Need flash begin boundary for checking
 80006b4:	4b32      	ldr	r3, [pc, #200]	; (8000780 <LoopForever+0x1c>)
  ldr r4, =__flash_end // Need also flash end boundary for checking
 80006b6:	4c35      	ldr	r4, [pc, #212]	; (800078c <LoopForever+0x28>)
  cmp r2, r3 // Comparing loaded data to flash begin
 80006b8:	429a      	cmp	r2, r3
  blo VectorTableStoreData // If less than flash begin, jump to store
 80006ba:	d304      	bcc.n	80006c6 <VectorTableStoreData>
  cmp r2, r4 // Comparing loaded data to flash end
 80006bc:	42a2      	cmp	r2, r4
  bhs VectorTableStoreData // If more than or equal to end, jump to store
 80006be:	d202      	bcs.n	80006c6 <VectorTableStoreData>

080006c0 <VectorTablePatchData>:

VectorTablePatchData:
  ldr r3, =gu32FirmwareOffset // Need data offset variable address
 80006c0:	4b2b      	ldr	r3, [pc, #172]	; (8000770 <LoopForever+0xc>)
  ldr r3, [r3] // And then the actual data
 80006c2:	681b      	ldr	r3, [r3, #0]
  adds r2, r2, r3 // Patch the data
 80006c4:	18d2      	adds	r2, r2, r3

080006c6 <VectorTableStoreData>:

VectorTableStoreData:
  ldr r3, =__ram_vector_table_begin // Get vector table begin in ram for ram data pointer
 80006c6:	4b2c      	ldr	r3, [pc, #176]	; (8000778 <LoopForever+0x14>)
  adds r3, r3, r0 // Add loop variable
 80006c8:	181b      	adds	r3, r3, r0
  str r2, [r3] // Store the data
 80006ca:	601a      	str	r2, [r3, #0]

080006cc <VectorTableLoopIncrements>:

VectorTableLoopIncrements:
  adds r0, r0, #4 // Increment loop
 80006cc:	3004      	adds	r0, #4
  b VectorTableCopyPatchLoopCond // Jump to loop condition checking
 80006ce:	e7e7      	b.n	80006a0 <VectorTableCopyPatchLoopCond>

080006d0 <VectorTableCopyPatchEnd>:
VectorTableCopyPatchEnd:



/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d0:	4832      	ldr	r0, [pc, #200]	; (800079c <LoopForever+0x38>)
  ldr r1, =_edata
 80006d2:	4933      	ldr	r1, [pc, #204]	; (80007a0 <LoopForever+0x3c>)
  ldr r2, =_sidata
 80006d4:	4a33      	ldr	r2, [pc, #204]	; (80007a4 <LoopForever+0x40>)
  ldr r7, =gu32FirmwareOffset // Load firmware offset variable address
 80006d6:	4f26      	ldr	r7, [pc, #152]	; (8000770 <LoopForever+0xc>)
  ldr r7, [r7] // Load the actual firmware offset variable data
 80006d8:	683f      	ldr	r7, [r7, #0]
  adds r2, r2, r7 // Patch the sidata location with offset
 80006da:	19d2      	adds	r2, r2, r7
  movs r3, #0
 80006dc:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006de:	e002      	b.n	80006e6 <LoopCopyDataInit>

080006e0 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e4:	3304      	adds	r3, #4

080006e6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e8:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ea:	d3f9      	bcc.n	80006e0 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ec:	4a2e      	ldr	r2, [pc, #184]	; (80007a8 <LoopForever+0x44>)
  ldr r4, =_ebss
 80006ee:	4c2f      	ldr	r4, [pc, #188]	; (80007ac <LoopForever+0x48>)
  movs r3, #0
 80006f0:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f2:	e00d      	b.n	8000710 <LoopFillZerobss>

080006f4 <FillZerobss>:

FillZerobss:
  // Here we need to check that we are not zeroing out addresses or needed symbols

  ldr r6, =gu32FirmwareAbsPosition // Load address of absolute firmware position variable
 80006f4:	4e1d      	ldr	r6, [pc, #116]	; (800076c <LoopForever+0x8>)
  cmp r2, r6 // Compare with what we are going to zero
 80006f6:	42b2      	cmp	r2, r6
  beq FillZerobssSkip // If we should skip zeroing, jump away
 80006f8:	d009      	beq.n	800070e <FillZerobssSkip>

  ldr r6, =gu32FirmwareOffset // Load address of firmware offset variable
 80006fa:	4e1d      	ldr	r6, [pc, #116]	; (8000770 <LoopForever+0xc>)
  cmp r2, r6 // Compare with what we are going to zero
 80006fc:	42b2      	cmp	r2, r6
  beq FillZerobssSkip // If we should skip zeroing, jump away
 80006fe:	d006      	beq.n	800070e <FillZerobssSkip>

  ldr r6, =gu32FirmwareAbsOffsetChecksum // Load address of firmware position and offset checksum
 8000700:	4e1c      	ldr	r6, [pc, #112]	; (8000774 <LoopForever+0x10>)
  cmp r2, r6 // Compare with what we are going to zero
 8000702:	42b2      	cmp	r2, r6
  beq FillZerobssSkip // If we should skip zeroing, jump away
 8000704:	d003      	beq.n	800070e <FillZerobssSkip>

  ldr r6, =gu32RamVectorTableBegin // Vector table location in RAM
 8000706:	4e1d      	ldr	r6, [pc, #116]	; (800077c <LoopForever+0x18>)
  cmp r2, r6 // Compare with what we are going to zero
 8000708:	42b2      	cmp	r2, r6
  beq FillZerobssSkip // If we should skip zeroing, jump away
 800070a:	d000      	beq.n	800070e <FillZerobssSkip>



  str  r3, [r2] // If not escaped yet, make the store
 800070c:	6013      	str	r3, [r2, #0]

0800070e <FillZerobssSkip>:

FillZerobssSkip:
  adds r2, r2, #4
 800070e:	3204      	adds	r2, #4

08000710 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000710:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000712:	d3ef      	bcc.n	80006f4 <FillZerobss>


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000714:	f7ff ff48 	bl	80005a8 <SystemInit>

08000718 <CallPreinitsInit>:



// Make our own __libc_init_array
CallPreinitsInit:
  ldr r7, =gu32FirmwareOffset
 8000718:	4f15      	ldr	r7, [pc, #84]	; (8000770 <LoopForever+0xc>)
  ldr r7, [r7]
 800071a:	683f      	ldr	r7, [r7, #0]
  ldr r0, =__preinit_array_start
 800071c:	4824      	ldr	r0, [pc, #144]	; (80007b0 <LoopForever+0x4c>)
  adds r0, r7
 800071e:	19c0      	adds	r0, r0, r7
  ldr r1, =__preinit_array_end
 8000720:	4924      	ldr	r1, [pc, #144]	; (80007b4 <LoopForever+0x50>)
  adds r1, r7
 8000722:	19c9      	adds	r1, r1, r7

08000724 <CallPreinitsLoopCond>:

CallPreinitsLoopCond:
  cmp r0, r1
 8000724:	4288      	cmp	r0, r1
  beq CallPreinitsEnd// If same, it is at end, go away
 8000726:	d007      	beq.n	8000738 <CallPreinitsEnd>

08000728 <CallPreinitsLoop>:

CallPreinitsLoop:
  ldr r5, =__init_array_start
 8000728:	4d23      	ldr	r5, [pc, #140]	; (80007b8 <LoopForever+0x54>)
  ldr r4, =__init_array_end // Yes, order is funny to say the least
 800072a:	4c24      	ldr	r4, [pc, #144]	; (80007bc <LoopForever+0x58>)
  ldr r3, [r0]
 800072c:	6803      	ldr	r3, [r0, #0]
  push {r0, r1, r2, r3, r4, r5, r6, r7} // Save context because calling externals
 800072e:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
  blx r3
 8000730:	4798      	blx	r3
  pop {r0, r1, r2, r3, r4, r5, r6, r7} // Retrieve context
 8000732:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
  adds r0, r0, #4
 8000734:	3004      	adds	r0, #4
  b CallPreinitsLoopCond
 8000736:	e7f5      	b.n	8000724 <CallPreinitsLoopCond>

08000738 <CallPreinitsEnd>:

CallPreinitsEnd:
  ldr r3, =_init
 8000738:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <LoopForever+0x5c>)
  adds r3, r7
 800073a:	19db      	adds	r3, r3, r7
  ldr r5, =__init_array_start
 800073c:	4d1e      	ldr	r5, [pc, #120]	; (80007b8 <LoopForever+0x54>)
  adds r5, r7
 800073e:	19ed      	adds	r5, r5, r7
  ldr r4, =__init_array_end
 8000740:	4c1e      	ldr	r4, [pc, #120]	; (80007bc <LoopForever+0x58>)
  adds r4, r7
 8000742:	19e4      	adds	r4, r4, r7
  push {r0, r1, r2, r3, r4, r5, r6, r7} // Save context because calling externals
 8000744:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
  blx r3
 8000746:	4798      	blx	r3
  pop {r0, r1, r2, r3, r4, r5, r6, r7} // Retrieve context
 8000748:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}

0800074a <CallInitsInit>:

CallInitsInit:
  ldr r7, =gu32FirmwareOffset
 800074a:	4f09      	ldr	r7, [pc, #36]	; (8000770 <LoopForever+0xc>)
  ldr r7, [r7]
 800074c:	683f      	ldr	r7, [r7, #0]

0800074e <CallInitsLoopCond>:

CallInitsLoopCond:
  cmp r5, r4
 800074e:	42a5      	cmp	r5, r4
  beq CallInitsEnd
 8000750:	d006      	beq.n	8000760 <CallInitsEnd>

08000752 <CallInitsLoop>:

CallInitsLoop:
  ldr r3, [r5]
 8000752:	682b      	ldr	r3, [r5, #0]
  add r3, r3, r7
 8000754:	443b      	add	r3, r7
  push {r0, r1, r2, r3, r4, r5, r6, r7} // Save context because calling externals
 8000756:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
  blx r3
 8000758:	4798      	blx	r3
  pop {r0, r1, r2, r3, r4, r5, r6, r7} // Retrieve context
 800075a:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
  adds r5, r5, #4
 800075c:	3504      	adds	r5, #4
  b CallInitsLoopCond
 800075e:	e7f6      	b.n	800074e <CallInitsLoopCond>

08000760 <CallInitsEnd>:
CallInitsEnd:



/* Call the application's entry point.*/
  bl  main
 8000760:	f7ff fd44 	bl	80001ec <main>

08000764 <LoopForever>:



LoopForever:
    b LoopForever
 8000764:	e7fe      	b.n	8000764 <LoopForever>
 8000766:	0000      	.short	0x0000
  ldr   sp, =_estack    /* Set stack pointer */
 8000768:	20010000 	.word	0x20010000
  ldr r2, =gu32FirmwareAbsPosition
 800076c:	200001e0 	.word	0x200001e0
  ldr r2, =gu32FirmwareOffset
 8000770:	200001e8 	.word	0x200001e8
  ldr r2, =gu32FirmwareAbsOffsetChecksum
 8000774:	200001e4 	.word	0x200001e4
  ldr r7, =__ram_vector_table_begin
 8000778:	20000000 	.word	0x20000000
  ldr r2, =gu32RamVectorTableBegin
 800077c:	200001ec 	.word	0x200001ec
  ldr r1, =__flash_begin; // Load variable address
 8000780:	08000000 	.word	0x08000000
  ldr r2, =__flash_global_offset_table_begin // Need global offset table table beginning for pointer
 8000784:	0800018c 	.word	0x0800018c
  ldr r3, =__flash_global_offset_table_end // And need end for checking loop
 8000788:	080001ac 	.word	0x080001ac
  ldr r4, =__flash_end // Need also flash end boundary for checking
 800078c:	08040000 	.word	0x08040000
  ldr r3, =__ram_global_offset_table_begin // Get global offset table begin in ram for ram data pointer
 8000790:	2000018c 	.word	0x2000018c
  ldr r2, =__flash_vector_table_begin // Need vector table beginning for pointer
 8000794:	08000000 	.word	0x08000000
  ldr r3, =__flash_vector_table_end // And need end for checking loop
 8000798:	0800018c 	.word	0x0800018c
  ldr r0, =_sdata
 800079c:	200001ac 	.word	0x200001ac
  ldr r1, =_edata
 80007a0:	200001b8 	.word	0x200001b8
  ldr r2, =_sidata
 80007a4:	08002274 	.word	0x08002274
  ldr r2, =_sbss
 80007a8:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 80007ac:	20000240 	.word	0x20000240
  ldr r0, =__preinit_array_start
 80007b0:	0800226c 	.word	0x0800226c
  ldr r1, =__preinit_array_end
 80007b4:	0800226c 	.word	0x0800226c
  ldr r5, =__init_array_start
 80007b8:	0800226c 	.word	0x0800226c
  ldr r4, =__init_array_end // Yes, order is funny to say the least
 80007bc:	08002270 	.word	0x08002270
  ldr r3, =_init
 80007c0:	08002215 	.word	0x08002215

080007c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007c4:	e7fe      	b.n	80007c4 <ADC1_IRQHandler>

080007c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007cc:	2300      	movs	r3, #0
 80007ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d0:	2003      	movs	r0, #3
 80007d2:	f000 f971 	bl	8000ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007d6:	2000      	movs	r0, #0
 80007d8:	f000 f80e 	bl	80007f8 <HAL_InitTick>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d002      	beq.n	80007e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
 80007e4:	71fb      	strb	r3, [r7, #7]
 80007e6:	e001      	b.n	80007ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007e8:	f7ff fe38 	bl	800045c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007ec:	79fb      	ldrb	r3, [r7, #7]
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000800:	2300      	movs	r3, #0
 8000802:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <HAL_InitTick+0x7c>)
 8000806:	f859 3003 	ldr.w	r3, [r9, r3]
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d02a      	beq.n	8000866 <HAL_InitTick+0x6e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000810:	4b19      	ldr	r3, [pc, #100]	; (8000878 <HAL_InitTick+0x80>)
 8000812:	f859 3003 	ldr.w	r3, [r9, r3]
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	4b16      	ldr	r3, [pc, #88]	; (8000874 <HAL_InitTick+0x7c>)
 800081a:	f859 3003 	ldr.w	r3, [r9, r3]
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	4619      	mov	r1, r3
 8000822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000826:	fbb3 f3f1 	udiv	r3, r3, r1
 800082a:	fbb2 f3f3 	udiv	r3, r2, r3
 800082e:	4618      	mov	r0, r3
 8000830:	f000 f985 	bl	8000b3e <HAL_SYSTICK_Config>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d112      	bne.n	8000860 <HAL_InitTick+0x68>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2b0f      	cmp	r3, #15
 800083e:	d80c      	bhi.n	800085a <HAL_InitTick+0x62>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000840:	2200      	movs	r2, #0
 8000842:	6879      	ldr	r1, [r7, #4]
 8000844:	f04f 30ff 	mov.w	r0, #4294967295
 8000848:	f000 f941 	bl	8000ace <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800084c:	4b0b      	ldr	r3, [pc, #44]	; (800087c <HAL_InitTick+0x84>)
 800084e:	f859 3003 	ldr.w	r3, [r9, r3]
 8000852:	461a      	mov	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	6013      	str	r3, [r2, #0]
 8000858:	e007      	b.n	800086a <HAL_InitTick+0x72>
      }
      else
      {
        status = HAL_ERROR;
 800085a:	2301      	movs	r3, #1
 800085c:	73fb      	strb	r3, [r7, #15]
 800085e:	e004      	b.n	800086a <HAL_InitTick+0x72>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000860:	2301      	movs	r3, #1
 8000862:	73fb      	strb	r3, [r7, #15]
 8000864:	e001      	b.n	800086a <HAL_InitTick+0x72>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000866:	2301      	movs	r3, #1
 8000868:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800086a:	7bfb      	ldrb	r3, [r7, #15]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	0000000c 	.word	0x0000000c
 8000878:	00000008 	.word	0x00000008
 800087c:	00000014 	.word	0x00000014

08000880 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <HAL_IncTick+0x2c>)
 8000886:	f859 3003 	ldr.w	r3, [r9, r3]
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	461a      	mov	r2, r3
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <HAL_IncTick+0x30>)
 8000890:	f859 3003 	ldr.w	r3, [r9, r3]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4413      	add	r3, r2
 8000898:	4a05      	ldr	r2, [pc, #20]	; (80008b0 <HAL_IncTick+0x30>)
 800089a:	f859 2002 	ldr.w	r2, [r9, r2]
 800089e:	6013      	str	r3, [r2, #0]
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	0000000c 	.word	0x0000000c
 80008b0:	00000010 	.word	0x00000010

080008b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return uwTick;
 80008b8:	4b04      	ldr	r3, [pc, #16]	; (80008cc <HAL_GetTick+0x18>)
 80008ba:	f859 3003 	ldr.w	r3, [r9, r3]
 80008be:	681b      	ldr	r3, [r3, #0]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	00000010 	.word	0x00000010

080008d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008ec:	4013      	ands	r3, r2
 80008ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	60d3      	str	r3, [r2, #12]
}
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <__NVIC_GetPriorityGrouping+0x18>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	0a1b      	lsrs	r3, r3, #8
 8000922:	f003 0307 	and.w	r3, r3, #7
}
 8000926:	4618      	mov	r0, r3
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	2b00      	cmp	r3, #0
 8000944:	db0b      	blt.n	800095e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	f003 021f 	and.w	r2, r3, #31
 800094c:	4907      	ldr	r1, [pc, #28]	; (800096c <__NVIC_EnableIRQ+0x38>)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	095b      	lsrs	r3, r3, #5
 8000954:	2001      	movs	r0, #1
 8000956:	fa00 f202 	lsl.w	r2, r0, r2
 800095a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000e100 	.word	0xe000e100

08000970 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800097a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097e:	2b00      	cmp	r3, #0
 8000980:	db12      	blt.n	80009a8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	f003 021f 	and.w	r2, r3, #31
 8000988:	490a      	ldr	r1, [pc, #40]	; (80009b4 <__NVIC_DisableIRQ+0x44>)
 800098a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098e:	095b      	lsrs	r3, r3, #5
 8000990:	2001      	movs	r0, #1
 8000992:	fa00 f202 	lsl.w	r2, r0, r2
 8000996:	3320      	adds	r3, #32
 8000998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800099c:	f3bf 8f4f 	dsb	sy
}
 80009a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009a2:	f3bf 8f6f 	isb	sy
}
 80009a6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	e000e100 	.word	0xe000e100

080009b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	6039      	str	r1, [r7, #0]
 80009c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	db0a      	blt.n	80009e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	490c      	ldr	r1, [pc, #48]	; (8000a04 <__NVIC_SetPriority+0x4c>)
 80009d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d6:	0112      	lsls	r2, r2, #4
 80009d8:	b2d2      	uxtb	r2, r2
 80009da:	440b      	add	r3, r1
 80009dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009e0:	e00a      	b.n	80009f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4908      	ldr	r1, [pc, #32]	; (8000a08 <__NVIC_SetPriority+0x50>)
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	f003 030f 	and.w	r3, r3, #15
 80009ee:	3b04      	subs	r3, #4
 80009f0:	0112      	lsls	r2, r2, #4
 80009f2:	b2d2      	uxtb	r2, r2
 80009f4:	440b      	add	r3, r1
 80009f6:	761a      	strb	r2, [r3, #24]
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	e000e100 	.word	0xe000e100
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b089      	sub	sp, #36	; 0x24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	f1c3 0307 	rsb	r3, r3, #7
 8000a26:	2b04      	cmp	r3, #4
 8000a28:	bf28      	it	cs
 8000a2a:	2304      	movcs	r3, #4
 8000a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	3304      	adds	r3, #4
 8000a32:	2b06      	cmp	r3, #6
 8000a34:	d902      	bls.n	8000a3c <NVIC_EncodePriority+0x30>
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	3b03      	subs	r3, #3
 8000a3a:	e000      	b.n	8000a3e <NVIC_EncodePriority+0x32>
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a40:	f04f 32ff 	mov.w	r2, #4294967295
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	43da      	mvns	r2, r3
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	401a      	ands	r2, r3
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a54:	f04f 31ff 	mov.w	r1, #4294967295
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5e:	43d9      	mvns	r1, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a64:	4313      	orrs	r3, r2
         );
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3724      	adds	r7, #36	; 0x24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
	...

08000a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a84:	d301      	bcc.n	8000a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a86:	2301      	movs	r3, #1
 8000a88:	e00f      	b.n	8000aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <SysTick_Config+0x40>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a92:	210f      	movs	r1, #15
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295
 8000a98:	f7ff ff8e 	bl	80009b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <SysTick_Config+0x40>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aa2:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <SysTick_Config+0x40>)
 8000aa4:	2207      	movs	r2, #7
 8000aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	e000e010 	.word	0xe000e010

08000ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff ff05 	bl	80008d0 <__NVIC_SetPriorityGrouping>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b086      	sub	sp, #24
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	60b9      	str	r1, [r7, #8]
 8000ad8:	607a      	str	r2, [r7, #4]
 8000ada:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ae0:	f7ff ff1a 	bl	8000918 <__NVIC_GetPriorityGrouping>
 8000ae4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	68b9      	ldr	r1, [r7, #8]
 8000aea:	6978      	ldr	r0, [r7, #20]
 8000aec:	f7ff ff8e 	bl	8000a0c <NVIC_EncodePriority>
 8000af0:	4602      	mov	r2, r0
 8000af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af6:	4611      	mov	r1, r2
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ff5d 	bl	80009b8 <__NVIC_SetPriority>
}
 8000afe:	bf00      	nop
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ff0d 	bl	8000934 <__NVIC_EnableIRQ>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	4603      	mov	r3, r0
 8000b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff1d 	bl	8000970 <__NVIC_DisableIRQ>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ff94 	bl	8000a74 <SysTick_Config>
 8000b4c:	4603      	mov	r3, r0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b087      	sub	sp, #28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b66:	e148      	b.n	8000dfa <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	fa01 f303 	lsl.w	r3, r1, r3
 8000b74:	4013      	ands	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f000 813a 	beq.w	8000df4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d00b      	beq.n	8000ba0 <HAL_GPIO_Init+0x48>
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d007      	beq.n	8000ba0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b94:	2b11      	cmp	r3, #17
 8000b96:	d003      	beq.n	8000ba0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	2b12      	cmp	r3, #18
 8000b9e:	d130      	bne.n	8000c02 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	2203      	movs	r2, #3
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	68da      	ldr	r2, [r3, #12]
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43db      	mvns	r3, r3
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	091b      	lsrs	r3, r3, #4
 8000bec:	f003 0201 	and.w	r2, r3, #1
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43db      	mvns	r3, r3
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	4013      	ands	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	689a      	ldr	r2, [r3, #8]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d003      	beq.n	8000c42 <HAL_GPIO_Init+0xea>
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	2b12      	cmp	r3, #18
 8000c40:	d123      	bne.n	8000c8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	08da      	lsrs	r2, r3, #3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3208      	adds	r2, #8
 8000c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	220f      	movs	r2, #15
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	4013      	ands	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	691a      	ldr	r2, [r3, #16]
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	f003 0307 	and.w	r3, r3, #7
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	08da      	lsrs	r2, r3, #3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3208      	adds	r2, #8
 8000c84:	6939      	ldr	r1, [r7, #16]
 8000c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	2203      	movs	r2, #3
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 0203 	and.w	r2, r3, #3
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f000 8094 	beq.w	8000df4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ccc:	4b52      	ldr	r3, [pc, #328]	; (8000e18 <HAL_GPIO_Init+0x2c0>)
 8000cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd0:	4a51      	ldr	r2, [pc, #324]	; (8000e18 <HAL_GPIO_Init+0x2c0>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	6613      	str	r3, [r2, #96]	; 0x60
 8000cd8:	4b4f      	ldr	r3, [pc, #316]	; (8000e18 <HAL_GPIO_Init+0x2c0>)
 8000cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ce4:	4a4d      	ldr	r2, [pc, #308]	; (8000e1c <HAL_GPIO_Init+0x2c4>)
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	089b      	lsrs	r3, r3, #2
 8000cea:	3302      	adds	r3, #2
 8000cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	220f      	movs	r2, #15
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d0e:	d00d      	beq.n	8000d2c <HAL_GPIO_Init+0x1d4>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a43      	ldr	r2, [pc, #268]	; (8000e20 <HAL_GPIO_Init+0x2c8>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d007      	beq.n	8000d28 <HAL_GPIO_Init+0x1d0>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a42      	ldr	r2, [pc, #264]	; (8000e24 <HAL_GPIO_Init+0x2cc>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d101      	bne.n	8000d24 <HAL_GPIO_Init+0x1cc>
 8000d20:	2302      	movs	r3, #2
 8000d22:	e004      	b.n	8000d2e <HAL_GPIO_Init+0x1d6>
 8000d24:	2307      	movs	r3, #7
 8000d26:	e002      	b.n	8000d2e <HAL_GPIO_Init+0x1d6>
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e000      	b.n	8000d2e <HAL_GPIO_Init+0x1d6>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	f002 0203 	and.w	r2, r2, #3
 8000d34:	0092      	lsls	r2, r2, #2
 8000d36:	4093      	lsls	r3, r2
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d3e:	4937      	ldr	r1, [pc, #220]	; (8000e1c <HAL_GPIO_Init+0x2c4>)
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	089b      	lsrs	r3, r3, #2
 8000d44:	3302      	adds	r3, #2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d4c:	4b36      	ldr	r3, [pc, #216]	; (8000e28 <HAL_GPIO_Init+0x2d0>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	43db      	mvns	r3, r3
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d70:	4a2d      	ldr	r2, [pc, #180]	; (8000e28 <HAL_GPIO_Init+0x2d0>)
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000d76:	4b2c      	ldr	r3, [pc, #176]	; (8000e28 <HAL_GPIO_Init+0x2d0>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d9a:	4a23      	ldr	r2, [pc, #140]	; (8000e28 <HAL_GPIO_Init+0x2d0>)
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000da0:	4b21      	ldr	r3, [pc, #132]	; (8000e28 <HAL_GPIO_Init+0x2d0>)
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d003      	beq.n	8000dc4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dc4:	4a18      	ldr	r2, [pc, #96]	; (8000e28 <HAL_GPIO_Init+0x2d0>)
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000dca:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <HAL_GPIO_Init+0x2d0>)
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000dee:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <HAL_GPIO_Init+0x2d0>)
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	3301      	adds	r3, #1
 8000df8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	fa22 f303 	lsr.w	r3, r2, r3
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	f47f aeaf 	bne.w	8000b68 <HAL_GPIO_Init+0x10>
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	bf00      	nop
 8000e0e:	371c      	adds	r7, #28
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	40010000 	.word	0x40010000
 8000e20:	48000400 	.word	0x48000400
 8000e24:	48000800 	.word	0x48000800
 8000e28:	40010400 	.word	0x40010400

08000e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	807b      	strh	r3, [r7, #2]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e3c:	787b      	ldrb	r3, [r7, #1]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e42:	887a      	ldrh	r2, [r7, #2]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e48:	e002      	b.n	8000e50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e4a:	887a      	ldrh	r2, [r7, #2]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	695b      	ldr	r3, [r3, #20]
 8000e6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e6e:	887a      	ldrh	r2, [r7, #2]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4013      	ands	r3, r2
 8000e74:	041a      	lsls	r2, r3, #16
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	43d9      	mvns	r1, r3
 8000e7a:	887b      	ldrh	r3, [r7, #2]
 8000e7c:	400b      	ands	r3, r1
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	619a      	str	r2, [r3, #24]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a04      	ldr	r2, [pc, #16]	; (8000eac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	40007000 	.word	0x40007000

08000eb0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40007000 	.word	0x40007000

08000ecc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000eda:	d132      	bne.n	8000f42 <HAL_PWREx_ControlVoltageScaling+0x76>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000edc:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ee8:	d03a      	beq.n	8000f60 <HAL_PWREx_ControlVoltageScaling+0x94>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eea:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ef2:	4a1f      	ldr	r2, [pc, #124]	; (8000f70 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ef4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ef8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000efa:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8000efc:	f859 3003 	ldr.w	r3, [r9, r3]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2232      	movs	r2, #50	; 0x32
 8000f04:	fb02 f303 	mul.w	r3, r2, r3
 8000f08:	4a1a      	ldr	r2, [pc, #104]	; (8000f74 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0e:	0c9b      	lsrs	r3, r3, #18
 8000f10:	3301      	adds	r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f14:	e002      	b.n	8000f1c <HAL_PWREx_ControlVoltageScaling+0x50>
      {
        wait_loop_index--;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f28:	d102      	bne.n	8000f30 <HAL_PWREx_ControlVoltageScaling+0x64>
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d1f2      	bne.n	8000f16 <HAL_PWREx_ControlVoltageScaling+0x4a>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f3c:	d110      	bne.n	8000f60 <HAL_PWREx_ControlVoltageScaling+0x94>
      {
        return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e00f      	b.n	8000f62 <HAL_PWREx_ControlVoltageScaling+0x96>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f42:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f4e:	d007      	beq.n	8000f60 <HAL_PWREx_ControlVoltageScaling+0x94>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f50:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f58:	4a05      	ldr	r2, [pc, #20]	; (8000f70 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40007000 	.word	0x40007000
 8000f74:	431bde83 	.word	0x431bde83
 8000f78:	00000008 	.word	0x00000008

08000f7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d102      	bne.n	8000f90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	f000 bc17 	b.w	80017be <HAL_RCC_OscConfig+0x842>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f90:	4ba3      	ldr	r3, [pc, #652]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f003 030c 	and.w	r3, r3, #12
 8000f98:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f9a:	4ba1      	ldr	r3, [pc, #644]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0310 	and.w	r3, r3, #16
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 80ea 	beq.w	8001186 <HAL_RCC_OscConfig+0x20a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d007      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x4c>
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	2b0c      	cmp	r3, #12
 8000fbc:	f040 8091 	bne.w	80010e2 <HAL_RCC_OscConfig+0x166>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	f040 808d 	bne.w	80010e2 <HAL_RCC_OscConfig+0x166>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000fc8:	4b95      	ldr	r3, [pc, #596]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d005      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x64>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d101      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e3ee      	b.n	80017be <HAL_RCC_OscConfig+0x842>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a1a      	ldr	r2, [r3, #32]
 8000fe4:	4b8e      	ldr	r3, [pc, #568]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 0308 	and.w	r3, r3, #8
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d004      	beq.n	8000ffa <HAL_RCC_OscConfig+0x7e>
 8000ff0:	4b8b      	ldr	r3, [pc, #556]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ff8:	e005      	b.n	8001006 <HAL_RCC_OscConfig+0x8a>
 8000ffa:	4b89      	ldr	r3, [pc, #548]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 8000ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001000:	091b      	lsrs	r3, r3, #4
 8001002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001006:	4293      	cmp	r3, r2
 8001008:	d223      	bcs.n	8001052 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a1b      	ldr	r3, [r3, #32]
 800100e:	4618      	mov	r0, r3
 8001010:	f000 fd50 	bl	8001ab4 <RCC_SetFlashLatencyFromMSIRange>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e3cf      	b.n	80017be <HAL_RCC_OscConfig+0x842>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800101e:	4b80      	ldr	r3, [pc, #512]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a7f      	ldr	r2, [pc, #508]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 8001024:	f043 0308 	orr.w	r3, r3, #8
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	4b7d      	ldr	r3, [pc, #500]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a1b      	ldr	r3, [r3, #32]
 8001036:	497a      	ldr	r1, [pc, #488]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 8001038:	4313      	orrs	r3, r2
 800103a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800103c:	4b78      	ldr	r3, [pc, #480]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	4975      	ldr	r1, [pc, #468]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 800104c:	4313      	orrs	r3, r2
 800104e:	604b      	str	r3, [r1, #4]
 8001050:	e025      	b.n	800109e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001052:	4b73      	ldr	r3, [pc, #460]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a72      	ldr	r2, [pc, #456]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 8001058:	f043 0308 	orr.w	r3, r3, #8
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	4b70      	ldr	r3, [pc, #448]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a1b      	ldr	r3, [r3, #32]
 800106a:	496d      	ldr	r1, [pc, #436]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 800106c:	4313      	orrs	r3, r2
 800106e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001070:	4b6b      	ldr	r3, [pc, #428]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	4968      	ldr	r1, [pc, #416]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 8001080:	4313      	orrs	r3, r2
 8001082:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d109      	bne.n	800109e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a1b      	ldr	r3, [r3, #32]
 800108e:	4618      	mov	r0, r3
 8001090:	f000 fd10 	bl	8001ab4 <RCC_SetFlashLatencyFromMSIRange>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e38f      	b.n	80017be <HAL_RCC_OscConfig+0x842>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800109e:	f000 fc7b 	bl	8001998 <HAL_RCC_GetSysClockFreq>
 80010a2:	4601      	mov	r1, r0
 80010a4:	4b5e      	ldr	r3, [pc, #376]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	091b      	lsrs	r3, r3, #4
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	4a5d      	ldr	r2, [pc, #372]	; (8001224 <HAL_RCC_OscConfig+0x2a8>)
 80010b0:	f859 2002 	ldr.w	r2, [r9, r2]
 80010b4:	5cd3      	ldrb	r3, [r2, r3]
 80010b6:	f003 031f 	and.w	r3, r3, #31
 80010ba:	fa21 f303 	lsr.w	r3, r1, r3
 80010be:	4a5a      	ldr	r2, [pc, #360]	; (8001228 <HAL_RCC_OscConfig+0x2ac>)
 80010c0:	f859 2002 	ldr.w	r2, [r9, r2]
 80010c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80010c6:	4b59      	ldr	r3, [pc, #356]	; (800122c <HAL_RCC_OscConfig+0x2b0>)
 80010c8:	f859 3003 	ldr.w	r3, [r9, r3]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fb92 	bl	80007f8 <HAL_InitTick>
 80010d4:	4603      	mov	r3, r0
 80010d6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d052      	beq.n	8001184 <HAL_RCC_OscConfig+0x208>
        {
          return status;
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	e36d      	b.n	80017be <HAL_RCC_OscConfig+0x842>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d032      	beq.n	8001150 <HAL_RCC_OscConfig+0x1d4>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80010ea:	4b4d      	ldr	r3, [pc, #308]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a4c      	ldr	r2, [pc, #304]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010f6:	f7ff fbdd 	bl	80008b4 <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010fc:	e008      	b.n	8001110 <HAL_RCC_OscConfig+0x194>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010fe:	f7ff fbd9 	bl	80008b4 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x194>
          {
            return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e356      	b.n	80017be <HAL_RCC_OscConfig+0x842>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001110:	4b43      	ldr	r3, [pc, #268]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0f0      	beq.n	80010fe <HAL_RCC_OscConfig+0x182>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800111c:	4b40      	ldr	r3, [pc, #256]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a3f      	ldr	r2, [pc, #252]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 8001122:	f043 0308 	orr.w	r3, r3, #8
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	4b3d      	ldr	r3, [pc, #244]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	493a      	ldr	r1, [pc, #232]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 8001136:	4313      	orrs	r3, r2
 8001138:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800113a:	4b39      	ldr	r3, [pc, #228]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	4935      	ldr	r1, [pc, #212]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 800114a:	4313      	orrs	r3, r2
 800114c:	604b      	str	r3, [r1, #4]
 800114e:	e01a      	b.n	8001186 <HAL_RCC_OscConfig+0x20a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001150:	4b33      	ldr	r3, [pc, #204]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a32      	ldr	r2, [pc, #200]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 8001156:	f023 0301 	bic.w	r3, r3, #1
 800115a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800115c:	f7ff fbaa 	bl	80008b4 <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x1fa>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001164:	f7ff fba6 	bl	80008b4 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x1fa>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e323      	b.n	80017be <HAL_RCC_OscConfig+0x842>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001176:	4b2a      	ldr	r3, [pc, #168]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f0      	bne.n	8001164 <HAL_RCC_OscConfig+0x1e8>
 8001182:	e000      	b.n	8001186 <HAL_RCC_OscConfig+0x20a>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001184:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b00      	cmp	r3, #0
 8001190:	d073      	beq.n	800127a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	2b08      	cmp	r3, #8
 8001196:	d005      	beq.n	80011a4 <HAL_RCC_OscConfig+0x228>
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	2b0c      	cmp	r3, #12
 800119c:	d10e      	bne.n	80011bc <HAL_RCC_OscConfig+0x240>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	d10b      	bne.n	80011bc <HAL_RCC_OscConfig+0x240>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a4:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d063      	beq.n	8001278 <HAL_RCC_OscConfig+0x2fc>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d15f      	bne.n	8001278 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e300      	b.n	80017be <HAL_RCC_OscConfig+0x842>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c4:	d106      	bne.n	80011d4 <HAL_RCC_OscConfig+0x258>
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a15      	ldr	r2, [pc, #84]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 80011cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	e01d      	b.n	8001210 <HAL_RCC_OscConfig+0x294>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011dc:	d10c      	bne.n	80011f8 <HAL_RCC_OscConfig+0x27c>
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a0f      	ldr	r2, [pc, #60]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 80011e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a0c      	ldr	r2, [pc, #48]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 80011f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	e00b      	b.n	8001210 <HAL_RCC_OscConfig+0x294>
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a08      	ldr	r2, [pc, #32]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 80011fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a05      	ldr	r2, [pc, #20]	; (8001220 <HAL_RCC_OscConfig+0x2a4>)
 800120a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800120e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d01b      	beq.n	8001250 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001218:	f7ff fb4c 	bl	80008b4 <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800121e:	e010      	b.n	8001242 <HAL_RCC_OscConfig+0x2c6>
 8001220:	40021000 	.word	0x40021000
 8001224:	00000018 	.word	0x00000018
 8001228:	00000008 	.word	0x00000008
 800122c:	00000014 	.word	0x00000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001230:	f7ff fb40 	bl	80008b4 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b64      	cmp	r3, #100	; 0x64
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e2bd      	b.n	80017be <HAL_RCC_OscConfig+0x842>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001242:	4baf      	ldr	r3, [pc, #700]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f0      	beq.n	8001230 <HAL_RCC_OscConfig+0x2b4>
 800124e:	e014      	b.n	800127a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001250:	f7ff fb30 	bl	80008b4 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x2ee>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001258:	f7ff fb2c 	bl	80008b4 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b64      	cmp	r3, #100	; 0x64
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x2ee>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e2a9      	b.n	80017be <HAL_RCC_OscConfig+0x842>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800126a:	4ba5      	ldr	r3, [pc, #660]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0x2dc>
 8001276:	e000      	b.n	800127a <HAL_RCC_OscConfig+0x2fe>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d060      	beq.n	8001348 <HAL_RCC_OscConfig+0x3cc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	2b04      	cmp	r3, #4
 800128a:	d005      	beq.n	8001298 <HAL_RCC_OscConfig+0x31c>
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	2b0c      	cmp	r3, #12
 8001290:	d119      	bne.n	80012c6 <HAL_RCC_OscConfig+0x34a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d116      	bne.n	80012c6 <HAL_RCC_OscConfig+0x34a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001298:	4b99      	ldr	r3, [pc, #612]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d005      	beq.n	80012b0 <HAL_RCC_OscConfig+0x334>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d101      	bne.n	80012b0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e286      	b.n	80017be <HAL_RCC_OscConfig+0x842>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b0:	4b93      	ldr	r3, [pc, #588]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	061b      	lsls	r3, r3, #24
 80012be:	4990      	ldr	r1, [pc, #576]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012c4:	e040      	b.n	8001348 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d023      	beq.n	8001316 <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012ce:	4b8c      	ldr	r3, [pc, #560]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a8b      	ldr	r2, [pc, #556]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 80012d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012da:	f7ff faeb 	bl	80008b4 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012e2:	f7ff fae7 	bl	80008b4 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e264      	b.n	80017be <HAL_RCC_OscConfig+0x842>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012f4:	4b82      	ldr	r3, [pc, #520]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0f0      	beq.n	80012e2 <HAL_RCC_OscConfig+0x366>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001300:	4b7f      	ldr	r3, [pc, #508]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	691b      	ldr	r3, [r3, #16]
 800130c:	061b      	lsls	r3, r3, #24
 800130e:	497c      	ldr	r1, [pc, #496]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 8001310:	4313      	orrs	r3, r2
 8001312:	604b      	str	r3, [r1, #4]
 8001314:	e018      	b.n	8001348 <HAL_RCC_OscConfig+0x3cc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001316:	4b7a      	ldr	r3, [pc, #488]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a79      	ldr	r2, [pc, #484]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 800131c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001322:	f7ff fac7 	bl	80008b4 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x3c0>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800132a:	f7ff fac3 	bl	80008b4 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e240      	b.n	80017be <HAL_RCC_OscConfig+0x842>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800133c:	4b70      	ldr	r3, [pc, #448]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1f0      	bne.n	800132a <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0308 	and.w	r3, r3, #8
 8001350:	2b00      	cmp	r3, #0
 8001352:	d03c      	beq.n	80013ce <HAL_RCC_OscConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d01c      	beq.n	8001396 <HAL_RCC_OscConfig+0x41a>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800135c:	4b68      	ldr	r3, [pc, #416]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 800135e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001362:	4a67      	ldr	r2, [pc, #412]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800136c:	f7ff faa2 	bl	80008b4 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001374:	f7ff fa9e 	bl	80008b4 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e21b      	b.n	80017be <HAL_RCC_OscConfig+0x842>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001386:	4b5e      	ldr	r3, [pc, #376]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 8001388:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0ef      	beq.n	8001374 <HAL_RCC_OscConfig+0x3f8>
 8001394:	e01b      	b.n	80013ce <HAL_RCC_OscConfig+0x452>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001396:	4b5a      	ldr	r3, [pc, #360]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 8001398:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800139c:	4a58      	ldr	r2, [pc, #352]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 800139e:	f023 0301 	bic.w	r3, r3, #1
 80013a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a6:	f7ff fa85 	bl	80008b4 <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ae:	f7ff fa81 	bl	80008b4 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e1fe      	b.n	80017be <HAL_RCC_OscConfig+0x842>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013c0:	4b4f      	ldr	r3, [pc, #316]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 80013c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1ef      	bne.n	80013ae <HAL_RCC_OscConfig+0x432>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0304 	and.w	r3, r3, #4
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 80a6 	beq.w	8001528 <HAL_RCC_OscConfig+0x5ac>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013dc:	2300      	movs	r3, #0
 80013de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80013e0:	4b47      	ldr	r3, [pc, #284]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 80013e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d10d      	bne.n	8001408 <HAL_RCC_OscConfig+0x48c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ec:	4b44      	ldr	r3, [pc, #272]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 80013ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f0:	4a43      	ldr	r2, [pc, #268]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 80013f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f6:	6593      	str	r3, [r2, #88]	; 0x58
 80013f8:	4b41      	ldr	r3, [pc, #260]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 80013fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001404:	2301      	movs	r3, #1
 8001406:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001408:	4b3e      	ldr	r3, [pc, #248]	; (8001504 <HAL_RCC_OscConfig+0x588>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001410:	2b00      	cmp	r3, #0
 8001412:	d118      	bne.n	8001446 <HAL_RCC_OscConfig+0x4ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001414:	4b3b      	ldr	r3, [pc, #236]	; (8001504 <HAL_RCC_OscConfig+0x588>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a3a      	ldr	r2, [pc, #232]	; (8001504 <HAL_RCC_OscConfig+0x588>)
 800141a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001420:	f7ff fa48 	bl	80008b4 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x4be>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001428:	f7ff fa44 	bl	80008b4 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x4be>
        {
          return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e1c1      	b.n	80017be <HAL_RCC_OscConfig+0x842>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800143a:	4b32      	ldr	r3, [pc, #200]	; (8001504 <HAL_RCC_OscConfig+0x588>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f0      	beq.n	8001428 <HAL_RCC_OscConfig+0x4ac>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d108      	bne.n	8001460 <HAL_RCC_OscConfig+0x4e4>
 800144e:	4b2c      	ldr	r3, [pc, #176]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 8001450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001454:	4a2a      	ldr	r2, [pc, #168]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800145e:	e024      	b.n	80014aa <HAL_RCC_OscConfig+0x52e>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b05      	cmp	r3, #5
 8001466:	d110      	bne.n	800148a <HAL_RCC_OscConfig+0x50e>
 8001468:	4b25      	ldr	r3, [pc, #148]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 800146a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800146e:	4a24      	ldr	r2, [pc, #144]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001478:	4b21      	ldr	r3, [pc, #132]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 800147a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800147e:	4a20      	ldr	r2, [pc, #128]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001488:	e00f      	b.n	80014aa <HAL_RCC_OscConfig+0x52e>
 800148a:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 800148c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001490:	4a1b      	ldr	r2, [pc, #108]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 8001492:	f023 0301 	bic.w	r3, r3, #1
 8001496:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800149a:	4b19      	ldr	r3, [pc, #100]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 800149c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014a0:	4a17      	ldr	r2, [pc, #92]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 80014a2:	f023 0304 	bic.w	r3, r3, #4
 80014a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d016      	beq.n	80014e0 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b2:	f7ff f9ff 	bl	80008b4 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014b8:	e00a      	b.n	80014d0 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ba:	f7ff f9fb 	bl	80008b4 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e176      	b.n	80017be <HAL_RCC_OscConfig+0x842>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <HAL_RCC_OscConfig+0x584>)
 80014d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0ed      	beq.n	80014ba <HAL_RCC_OscConfig+0x53e>
 80014de:	e01a      	b.n	8001516 <HAL_RCC_OscConfig+0x59a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e0:	f7ff f9e8 	bl	80008b4 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014e6:	e00f      	b.n	8001508 <HAL_RCC_OscConfig+0x58c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e8:	f7ff f9e4 	bl	80008b4 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d906      	bls.n	8001508 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e15f      	b.n	80017be <HAL_RCC_OscConfig+0x842>
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000
 8001504:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001508:	4baa      	ldr	r3, [pc, #680]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 800150a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1e8      	bne.n	80014e8 <HAL_RCC_OscConfig+0x56c>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001516:	7ffb      	ldrb	r3, [r7, #31]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d105      	bne.n	8001528 <HAL_RCC_OscConfig+0x5ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800151c:	4ba5      	ldr	r3, [pc, #660]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 800151e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001520:	4aa4      	ldr	r2, [pc, #656]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 8001522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001526:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0320 	and.w	r3, r3, #32
 8001530:	2b00      	cmp	r3, #0
 8001532:	d03c      	beq.n	80015ae <HAL_RCC_OscConfig+0x632>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001538:	2b00      	cmp	r3, #0
 800153a:	d01c      	beq.n	8001576 <HAL_RCC_OscConfig+0x5fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800153c:	4b9d      	ldr	r3, [pc, #628]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 800153e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001542:	4a9c      	ldr	r2, [pc, #624]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154c:	f7ff f9b2 	bl	80008b4 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x5ea>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001554:	f7ff f9ae 	bl	80008b4 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x5ea>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e12b      	b.n	80017be <HAL_RCC_OscConfig+0x842>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001566:	4b93      	ldr	r3, [pc, #588]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 8001568:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0ef      	beq.n	8001554 <HAL_RCC_OscConfig+0x5d8>
 8001574:	e01b      	b.n	80015ae <HAL_RCC_OscConfig+0x632>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001576:	4b8f      	ldr	r3, [pc, #572]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 8001578:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800157c:	4a8d      	ldr	r2, [pc, #564]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 800157e:	f023 0301 	bic.w	r3, r3, #1
 8001582:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001586:	f7ff f995 	bl	80008b4 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x624>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800158e:	f7ff f991 	bl	80008b4 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x624>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e10e      	b.n	80017be <HAL_RCC_OscConfig+0x842>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015a0:	4b84      	ldr	r3, [pc, #528]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 80015a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1ef      	bne.n	800158e <HAL_RCC_OscConfig+0x612>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 8102 	beq.w	80017bc <HAL_RCC_OscConfig+0x840>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015bc:	2b02      	cmp	r3, #2
 80015be:	f040 80c5 	bne.w	800174c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80015c2:	4b7c      	ldr	r3, [pc, #496]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	f003 0203 	and.w	r2, r3, #3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d12c      	bne.n	8001630 <HAL_RCC_OscConfig+0x6b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	3b01      	subs	r3, #1
 80015e2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d123      	bne.n	8001630 <HAL_RCC_OscConfig+0x6b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d11b      	bne.n	8001630 <HAL_RCC_OscConfig+0x6b4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001602:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001604:	429a      	cmp	r2, r3
 8001606:	d113      	bne.n	8001630 <HAL_RCC_OscConfig+0x6b4>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001612:	085b      	lsrs	r3, r3, #1
 8001614:	3b01      	subs	r3, #1
 8001616:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001618:	429a      	cmp	r2, r3
 800161a:	d109      	bne.n	8001630 <HAL_RCC_OscConfig+0x6b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	085b      	lsrs	r3, r3, #1
 8001628:	3b01      	subs	r3, #1
 800162a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800162c:	429a      	cmp	r2, r3
 800162e:	d067      	beq.n	8001700 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	2b0c      	cmp	r3, #12
 8001634:	d062      	beq.n	80016fc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001636:	4b5f      	ldr	r3, [pc, #380]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_RCC_OscConfig+0x6ca>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e0bb      	b.n	80017be <HAL_RCC_OscConfig+0x842>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001646:	4b5b      	ldr	r3, [pc, #364]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a5a      	ldr	r2, [pc, #360]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 800164c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001650:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001652:	f7ff f92f 	bl	80008b4 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800165a:	f7ff f92b 	bl	80008b4 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e0a8      	b.n	80017be <HAL_RCC_OscConfig+0x842>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800166c:	4b51      	ldr	r3, [pc, #324]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f0      	bne.n	800165a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001678:	4b4e      	ldr	r3, [pc, #312]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	4b4e      	ldr	r3, [pc, #312]	; (80017b8 <HAL_RCC_OscConfig+0x83c>)
 800167e:	4013      	ands	r3, r2
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001688:	3a01      	subs	r2, #1
 800168a:	0112      	lsls	r2, r2, #4
 800168c:	4311      	orrs	r1, r2
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001692:	0212      	lsls	r2, r2, #8
 8001694:	4311      	orrs	r1, r2
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800169a:	0852      	lsrs	r2, r2, #1
 800169c:	3a01      	subs	r2, #1
 800169e:	0552      	lsls	r2, r2, #21
 80016a0:	4311      	orrs	r1, r2
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016a6:	0852      	lsrs	r2, r2, #1
 80016a8:	3a01      	subs	r2, #1
 80016aa:	0652      	lsls	r2, r2, #25
 80016ac:	4311      	orrs	r1, r2
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80016b2:	06d2      	lsls	r2, r2, #27
 80016b4:	430a      	orrs	r2, r1
 80016b6:	493f      	ldr	r1, [pc, #252]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80016bc:	4b3d      	ldr	r3, [pc, #244]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a3c      	ldr	r2, [pc, #240]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 80016c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016c8:	4b3a      	ldr	r3, [pc, #232]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	4a39      	ldr	r2, [pc, #228]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 80016ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016d4:	f7ff f8ee 	bl	80008b4 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016dc:	f7ff f8ea 	bl	80008b4 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e067      	b.n	80017be <HAL_RCC_OscConfig+0x842>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ee:	4b31      	ldr	r3, [pc, #196]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016fa:	e05f      	b.n	80017bc <HAL_RCC_OscConfig+0x840>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e05e      	b.n	80017be <HAL_RCC_OscConfig+0x842>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001700:	4b2c      	ldr	r3, [pc, #176]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d157      	bne.n	80017bc <HAL_RCC_OscConfig+0x840>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800170c:	4b29      	ldr	r3, [pc, #164]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a28      	ldr	r2, [pc, #160]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 8001712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001716:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001718:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	4a25      	ldr	r2, [pc, #148]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 800171e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001722:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001724:	f7ff f8c6 	bl	80008b4 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172c:	f7ff f8c2 	bl	80008b4 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e03f      	b.n	80017be <HAL_RCC_OscConfig+0x842>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800173e:	4b1d      	ldr	r3, [pc, #116]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0x7b0>
 800174a:	e037      	b.n	80017bc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	2b0c      	cmp	r3, #12
 8001750:	d02d      	beq.n	80017ae <HAL_RCC_OscConfig+0x832>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001752:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a17      	ldr	r2, [pc, #92]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 8001758:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800175c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d105      	bne.n	8001776 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800176a:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	4a11      	ldr	r2, [pc, #68]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 8001770:	f023 0303 	bic.w	r3, r3, #3
 8001774:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001776:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	4a0e      	ldr	r2, [pc, #56]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 800177c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001784:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001786:	f7ff f895 	bl	80008b4 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x824>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178e:	f7ff f891 	bl	80008b4 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x824>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e00e      	b.n	80017be <HAL_RCC_OscConfig+0x842>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <HAL_RCC_OscConfig+0x838>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1f0      	bne.n	800178e <HAL_RCC_OscConfig+0x812>
 80017ac:	e006      	b.n	80017bc <HAL_RCC_OscConfig+0x840>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e005      	b.n	80017be <HAL_RCC_OscConfig+0x842>
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000
 80017b8:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3720      	adds	r7, #32
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop

080017c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e0ce      	b.n	800197a <HAL_RCC_ClockConfig+0x1b2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017dc:	4b69      	ldr	r3, [pc, #420]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d910      	bls.n	800180c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ea:	4b66      	ldr	r3, [pc, #408]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f023 0207 	bic.w	r2, r3, #7
 80017f2:	4964      	ldr	r1, [pc, #400]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fa:	4b62      	ldr	r3, [pc, #392]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	429a      	cmp	r2, r3
 8001806:	d001      	beq.n	800180c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e0b6      	b.n	800197a <HAL_RCC_ClockConfig+0x1b2>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d04c      	beq.n	80018b2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b03      	cmp	r3, #3
 800181e:	d107      	bne.n	8001830 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001820:	4b59      	ldr	r3, [pc, #356]	; (8001988 <HAL_RCC_ClockConfig+0x1c0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d121      	bne.n	8001870 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0a4      	b.n	800197a <HAL_RCC_ClockConfig+0x1b2>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b02      	cmp	r3, #2
 8001836:	d107      	bne.n	8001848 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001838:	4b53      	ldr	r3, [pc, #332]	; (8001988 <HAL_RCC_ClockConfig+0x1c0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d115      	bne.n	8001870 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e098      	b.n	800197a <HAL_RCC_ClockConfig+0x1b2>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d107      	bne.n	8001860 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001850:	4b4d      	ldr	r3, [pc, #308]	; (8001988 <HAL_RCC_ClockConfig+0x1c0>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d109      	bne.n	8001870 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e08c      	b.n	800197a <HAL_RCC_ClockConfig+0x1b2>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001860:	4b49      	ldr	r3, [pc, #292]	; (8001988 <HAL_RCC_ClockConfig+0x1c0>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e084      	b.n	800197a <HAL_RCC_ClockConfig+0x1b2>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001870:	4b45      	ldr	r3, [pc, #276]	; (8001988 <HAL_RCC_ClockConfig+0x1c0>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f023 0203 	bic.w	r2, r3, #3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	4942      	ldr	r1, [pc, #264]	; (8001988 <HAL_RCC_ClockConfig+0x1c0>)
 800187e:	4313      	orrs	r3, r2
 8001880:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001882:	f7ff f817 	bl	80008b4 <HAL_GetTick>
 8001886:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001888:	e00a      	b.n	80018a0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800188a:	f7ff f813 	bl	80008b4 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	f241 3288 	movw	r2, #5000	; 0x1388
 8001898:	4293      	cmp	r3, r2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e06c      	b.n	800197a <HAL_RCC_ClockConfig+0x1b2>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a0:	4b39      	ldr	r3, [pc, #228]	; (8001988 <HAL_RCC_ClockConfig+0x1c0>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 020c 	and.w	r2, r3, #12
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d1eb      	bne.n	800188a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d008      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018be:	4b32      	ldr	r3, [pc, #200]	; (8001988 <HAL_RCC_ClockConfig+0x1c0>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	492f      	ldr	r1, [pc, #188]	; (8001988 <HAL_RCC_ClockConfig+0x1c0>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018d0:	4b2c      	ldr	r3, [pc, #176]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d210      	bcs.n	8001900 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018de:	4b29      	ldr	r3, [pc, #164]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f023 0207 	bic.w	r2, r3, #7
 80018e6:	4927      	ldr	r1, [pc, #156]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ee:	4b25      	ldr	r3, [pc, #148]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e03c      	b.n	800197a <HAL_RCC_ClockConfig+0x1b2>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	d008      	beq.n	800191e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800190c:	4b1e      	ldr	r3, [pc, #120]	; (8001988 <HAL_RCC_ClockConfig+0x1c0>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	491b      	ldr	r1, [pc, #108]	; (8001988 <HAL_RCC_ClockConfig+0x1c0>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d009      	beq.n	800193e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800192a:	4b17      	ldr	r3, [pc, #92]	; (8001988 <HAL_RCC_ClockConfig+0x1c0>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4913      	ldr	r1, [pc, #76]	; (8001988 <HAL_RCC_ClockConfig+0x1c0>)
 800193a:	4313      	orrs	r3, r2
 800193c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800193e:	f000 f82b 	bl	8001998 <HAL_RCC_GetSysClockFreq>
 8001942:	4601      	mov	r1, r0
 8001944:	4b10      	ldr	r3, [pc, #64]	; (8001988 <HAL_RCC_ClockConfig+0x1c0>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	091b      	lsrs	r3, r3, #4
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	4a0f      	ldr	r2, [pc, #60]	; (800198c <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	f859 2002 	ldr.w	r2, [r9, r2]
 8001954:	5cd3      	ldrb	r3, [r2, r3]
 8001956:	f003 031f 	and.w	r3, r3, #31
 800195a:	fa21 f303 	lsr.w	r3, r1, r3
 800195e:	4a0c      	ldr	r2, [pc, #48]	; (8001990 <HAL_RCC_ClockConfig+0x1c8>)
 8001960:	f859 2002 	ldr.w	r2, [r9, r2]
 8001964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001966:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_RCC_ClockConfig+0x1cc>)
 8001968:	f859 3003 	ldr.w	r3, [r9, r3]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe ff42 	bl	80007f8 <HAL_InitTick>
 8001974:	4603      	mov	r3, r0
 8001976:	72fb      	strb	r3, [r7, #11]

  return status;
 8001978:	7afb      	ldrb	r3, [r7, #11]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40022000 	.word	0x40022000
 8001988:	40021000 	.word	0x40021000
 800198c:	00000018 	.word	0x00000018
 8001990:	00000008 	.word	0x00000008
 8001994:	00000014 	.word	0x00000014

08001998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001998:	b480      	push	{r7}
 800199a:	b089      	sub	sp, #36	; 0x24
 800199c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
 80019a2:	2300      	movs	r3, #0
 80019a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019a6:	4b3f      	ldr	r3, [pc, #252]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019b0:	4b3c      	ldr	r3, [pc, #240]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d005      	beq.n	80019cc <HAL_RCC_GetSysClockFreq+0x34>
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	2b0c      	cmp	r3, #12
 80019c4:	d124      	bne.n	8001a10 <HAL_RCC_GetSysClockFreq+0x78>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d121      	bne.n	8001a10 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80019cc:	4b35      	ldr	r3, [pc, #212]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0308 	and.w	r3, r3, #8
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d107      	bne.n	80019e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019d8:	4b32      	ldr	r3, [pc, #200]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80019da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019de:	0a1b      	lsrs	r3, r3, #8
 80019e0:	f003 030f 	and.w	r3, r3, #15
 80019e4:	61fb      	str	r3, [r7, #28]
 80019e6:	e005      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019e8:	4b2e      	ldr	r3, [pc, #184]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80019f4:	4b2e      	ldr	r3, [pc, #184]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x118>)
 80019f6:	f859 3003 	ldr.w	r3, [r9, r3]
 80019fa:	461a      	mov	r2, r3
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a02:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10d      	bne.n	8001a26 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a0e:	e00a      	b.n	8001a26 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	d102      	bne.n	8001a1c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a16:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a18:	61bb      	str	r3, [r7, #24]
 8001a1a:	e004      	b.n	8001a26 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d101      	bne.n	8001a26 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a22:	4b22      	ldr	r3, [pc, #136]	; (8001aac <HAL_RCC_GetSysClockFreq+0x114>)
 8001a24:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	2b0c      	cmp	r3, #12
 8001a2a:	d134      	bne.n	8001a96 <HAL_RCC_GetSysClockFreq+0xfe>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d003      	beq.n	8001a44 <HAL_RCC_GetSysClockFreq+0xac>
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d003      	beq.n	8001a4a <HAL_RCC_GetSysClockFreq+0xb2>
 8001a42:	e005      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0xb8>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a44:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a46:	617b      	str	r3, [r7, #20]
      break;
 8001a48:	e005      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0xbe>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a4a:	4b18      	ldr	r3, [pc, #96]	; (8001aac <HAL_RCC_GetSysClockFreq+0x114>)
 8001a4c:	617b      	str	r3, [r7, #20]
      break;
 8001a4e:	e002      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0xbe>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	617b      	str	r3, [r7, #20]
      break;
 8001a54:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a56:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	091b      	lsrs	r3, r3, #4
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	3301      	adds	r3, #1
 8001a62:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	0a1b      	lsrs	r3, r3, #8
 8001a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	fb02 f203 	mul.w	r2, r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	0e5b      	lsrs	r3, r3, #25
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	3301      	adds	r3, #1
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a94:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a96:	69bb      	ldr	r3, [r7, #24]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3724      	adds	r7, #36	; 0x24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	00f42400 	.word	0x00f42400
 8001aac:	007a1200 	.word	0x007a1200
 8001ab0:	00000004 	.word	0x00000004

08001ab4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ac0:	4b2a      	ldr	r3, [pc, #168]	; (8001b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001acc:	f7ff f9f0 	bl	8000eb0 <HAL_PWREx_GetVoltageRange>
 8001ad0:	6178      	str	r0, [r7, #20]
 8001ad2:	e014      	b.n	8001afe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ad4:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad8:	4a24      	ldr	r2, [pc, #144]	; (8001b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ade:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae0:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001aec:	f7ff f9e0 	bl	8000eb0 <HAL_PWREx_GetVoltageRange>
 8001af0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001af2:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af6:	4a1d      	ldr	r2, [pc, #116]	; (8001b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001af8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001afc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b04:	d10b      	bne.n	8001b1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b80      	cmp	r3, #128	; 0x80
 8001b0a:	d919      	bls.n	8001b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2ba0      	cmp	r3, #160	; 0xa0
 8001b10:	d902      	bls.n	8001b18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b12:	2302      	movs	r3, #2
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	e013      	b.n	8001b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b18:	2301      	movs	r3, #1
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	e010      	b.n	8001b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b80      	cmp	r3, #128	; 0x80
 8001b22:	d902      	bls.n	8001b2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b24:	2303      	movs	r3, #3
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	e00a      	b.n	8001b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b80      	cmp	r3, #128	; 0x80
 8001b2e:	d102      	bne.n	8001b36 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b30:	2302      	movs	r3, #2
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	e004      	b.n	8001b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b70      	cmp	r3, #112	; 0x70
 8001b3a:	d101      	bne.n	8001b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f023 0207 	bic.w	r2, r3, #7
 8001b48:	4909      	ldr	r1, [pc, #36]	; (8001b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d001      	beq.n	8001b62 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40022000 	.word	0x40022000

08001b74 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001b7e:	f043 0304 	orr.w	r3, r3, #4
 8001b82:	6013      	str	r3, [r2, #0]
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40021000 	.word	0x40021000

08001b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e049      	b.n	8001c3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d106      	bne.n	8001bc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7fe fc72 	bl	80004a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3304      	adds	r3, #4
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	f000 fa2e 	bl	8002034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6a1a      	ldr	r2, [r3, #32]
 8001c58:	f241 1311 	movw	r3, #4369	; 0x1111
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10f      	bne.n	8001c82 <HAL_TIM_Base_DeInit+0x40>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6a1a      	ldr	r2, [r3, #32]
 8001c68:	f240 4344 	movw	r3, #1092	; 0x444
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d107      	bne.n	8001c82 <HAL_TIM_Base_DeInit+0x40>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0201 	bic.w	r2, r2, #1
 8001c80:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7fe fc34 	bl	80004f0 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d001      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e03b      	b.n	8001d8c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2202      	movs	r2, #2
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0201 	orr.w	r2, r2, #1
 8001d2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a19      	ldr	r2, [pc, #100]	; (8001d98 <HAL_TIM_Base_Start_IT+0x9c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d009      	beq.n	8001d4a <HAL_TIM_Base_Start_IT+0x4e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d3e:	d004      	beq.n	8001d4a <HAL_TIM_Base_Start_IT+0x4e>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a15      	ldr	r2, [pc, #84]	; (8001d9c <HAL_TIM_Base_Start_IT+0xa0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d115      	bne.n	8001d76 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <HAL_TIM_Base_Start_IT+0xa4>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2b06      	cmp	r3, #6
 8001d5a:	d015      	beq.n	8001d88 <HAL_TIM_Base_Start_IT+0x8c>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d62:	d011      	beq.n	8001d88 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0201 	orr.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d74:	e008      	b.n	8001d88 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f042 0201 	orr.w	r2, r2, #1
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	e000      	b.n	8001d8a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	40012c00 	.word	0x40012c00
 8001d9c:	40014000 	.word	0x40014000
 8001da0:	00010007 	.word	0x00010007

08001da4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d122      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d11b      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f06f 0202 	mvn.w	r2, #2
 8001dd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f905 	bl	8001ff6 <HAL_TIM_IC_CaptureCallback>
 8001dec:	e005      	b.n	8001dfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f8f7 	bl	8001fe2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f908 	bl	800200a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d122      	bne.n	8001e54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d11b      	bne.n	8001e54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f06f 0204 	mvn.w	r2, #4
 8001e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2202      	movs	r2, #2
 8001e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f8db 	bl	8001ff6 <HAL_TIM_IC_CaptureCallback>
 8001e40:	e005      	b.n	8001e4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f8cd 	bl	8001fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f8de 	bl	800200a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d122      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d11b      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f06f 0208 	mvn.w	r2, #8
 8001e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f8b1 	bl	8001ff6 <HAL_TIM_IC_CaptureCallback>
 8001e94:	e005      	b.n	8001ea2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f8a3 	bl	8001fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f8b4 	bl	800200a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f003 0310 	and.w	r3, r3, #16
 8001eb2:	2b10      	cmp	r3, #16
 8001eb4:	d122      	bne.n	8001efc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	2b10      	cmp	r3, #16
 8001ec2:	d11b      	bne.n	8001efc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0210 	mvn.w	r2, #16
 8001ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2208      	movs	r2, #8
 8001ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f887 	bl	8001ff6 <HAL_TIM_IC_CaptureCallback>
 8001ee8:	e005      	b.n	8001ef6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f879 	bl	8001fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f88a 	bl	800200a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d10e      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d107      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0201 	mvn.w	r2, #1
 8001f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7fe fa34 	bl	8000390 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f32:	2b80      	cmp	r3, #128	; 0x80
 8001f34:	d10e      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f40:	2b80      	cmp	r3, #128	; 0x80
 8001f42:	d107      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f944 	bl	80021dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f62:	d10e      	bne.n	8001f82 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6e:	2b80      	cmp	r3, #128	; 0x80
 8001f70:	d107      	bne.n	8001f82 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f937 	bl	80021f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8c:	2b40      	cmp	r3, #64	; 0x40
 8001f8e:	d10e      	bne.n	8001fae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9a:	2b40      	cmp	r3, #64	; 0x40
 8001f9c:	d107      	bne.n	8001fae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f838 	bl	800201e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	f003 0320 	and.w	r3, r3, #32
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	d10e      	bne.n	8001fda <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	f003 0320 	and.w	r3, r3, #32
 8001fc6:	2b20      	cmp	r3, #32
 8001fc8:	d107      	bne.n	8001fda <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f06f 0220 	mvn.w	r2, #32
 8001fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f8f7 	bl	80021c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a2a      	ldr	r2, [pc, #168]	; (80020f0 <TIM_Base_SetConfig+0xbc>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d003      	beq.n	8002054 <TIM_Base_SetConfig+0x20>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002052:	d108      	bne.n	8002066 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800205a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a21      	ldr	r2, [pc, #132]	; (80020f0 <TIM_Base_SetConfig+0xbc>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00b      	beq.n	8002086 <TIM_Base_SetConfig+0x52>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002074:	d007      	beq.n	8002086 <TIM_Base_SetConfig+0x52>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a1e      	ldr	r2, [pc, #120]	; (80020f4 <TIM_Base_SetConfig+0xc0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d003      	beq.n	8002086 <TIM_Base_SetConfig+0x52>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a1d      	ldr	r2, [pc, #116]	; (80020f8 <TIM_Base_SetConfig+0xc4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d108      	bne.n	8002098 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800208c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	4313      	orrs	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a0c      	ldr	r2, [pc, #48]	; (80020f0 <TIM_Base_SetConfig+0xbc>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d007      	beq.n	80020d4 <TIM_Base_SetConfig+0xa0>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a0b      	ldr	r2, [pc, #44]	; (80020f4 <TIM_Base_SetConfig+0xc0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d003      	beq.n	80020d4 <TIM_Base_SetConfig+0xa0>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <TIM_Base_SetConfig+0xc4>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d103      	bne.n	80020dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	615a      	str	r2, [r3, #20]
}
 80020e2:	bf00      	nop
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40012c00 	.word	0x40012c00
 80020f4:	40014000 	.word	0x40014000
 80020f8:	40014400 	.word	0x40014400

080020fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800210c:	2b01      	cmp	r3, #1
 800210e:	d101      	bne.n	8002114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002110:	2302      	movs	r3, #2
 8002112:	e04f      	b.n	80021b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2202      	movs	r2, #2
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a21      	ldr	r2, [pc, #132]	; (80021c0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d108      	bne.n	8002150 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002144:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	4313      	orrs	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002156:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	4313      	orrs	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a14      	ldr	r2, [pc, #80]	; (80021c0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d009      	beq.n	8002188 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800217c:	d004      	beq.n	8002188 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a10      	ldr	r2, [pc, #64]	; (80021c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d10c      	bne.n	80021a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800218e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	4313      	orrs	r3, r2
 8002198:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	40012c00 	.word	0x40012c00
 80021c4:	40014000 	.word	0x40014000

080021c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <memset>:
 8002204:	4402      	add	r2, r0
 8002206:	4603      	mov	r3, r0
 8002208:	4293      	cmp	r3, r2
 800220a:	d100      	bne.n	800220e <memset+0xa>
 800220c:	4770      	bx	lr
 800220e:	f803 1b01 	strb.w	r1, [r3], #1
 8002212:	e7f9      	b.n	8002208 <memset+0x4>

08002214 <_init>:
 8002214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002216:	bf00      	nop
 8002218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800221a:	bc08      	pop	{r3}
 800221c:	469e      	mov	lr, r3
 800221e:	4770      	bx	lr

08002220 <_fini>:
 8002220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002222:	bf00      	nop
 8002224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002226:	bc08      	pop	{r3}
 8002228:	469e      	mov	lr, r3
 800222a:	4770      	bx	lr
